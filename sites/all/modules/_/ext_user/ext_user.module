<?

define('ROLE_ADMIN', '3');
define('ROLE_MANAGER_PRODUCTION', 4);
define('ROLE_USER_PRODUCTION', 6);
define('ROLE_MANAGER_WAREHOUSE', 7);
define('ROLE_USER_WAREHOUSE', 5);

define('COMPANY_TD', 80);

/**
 * Implementation of hook_menu().
 */
function ext_user_menu()
{
//  $items['admin/config/custom'] = array(
//    'title' => 'Custom',
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('ext_user_settings_form'),
//    'access arguments' => array('access manager settings'),
//    'file' => 'includes/ext_user.admin.inc',
//  );
//  $items['admin/config/custom/settings'] = array(
//    'title' => 'Настройки',
//    'type' => MENU_DEFAULT_LOCAL_TASK,
//  );

  $items['admin/config/custom'] = array(
    'title' => 'Custom',
    'position' => 'left',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/custom/settings'] = array(
    'title' => 'Настройки',
    'weight' => -1,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ext_user_settings_form'),
    'access arguments' => array('access manager settings'),
    'file' => 'includes/ext_user.admin.inc',
  );
  $items['admin/config/custom/transfer'] = array(
    'title' => 'Запустить перенос данных',
    'weight' => 5,
    'page callback' => 'ext_user_transfer_callback',
    'access arguments' => array('access manager settings'),
    'file' => 'includes/ext_user.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function ext_user_menu_alter(&$items)
{
  // убрать восстановление пароля со страницы входа
//  $items['user/password']['access callback'] = false;
}

/**
 * Implements hook_cron_queue_info().
 */
function ext_user_cron_queue_info()
{
  $queues['ext_user_transfer_queue'] = array(
    'worker callback' => 'ext_user_transfer_range',
  );

  return $queues;
}



/**
 * hook_module_implements_alter
 * change hook execution order, commerce_helper - last
 */
function ext_user_module_implements_alter(&$implementations, $hook)
{
  // Name of the hook.
  if (in_array($hook, ['form_alter'])) {
    // ext_user - last
    $module = 'ext_user';
    if (isset($implementations[$module])) {
      $group = $implementations[$module];
      unset($implementations[$module]);
      $implementations[$module] = $group;
    }
  }
}

function ext_user_preprocess_menu_link(&$vars)
{
  if ($vars["element"]["#href"] == 'user' && user_is_logged_in()) {
    // сменить Аккаунт на Имя пользователя
    $vars["element"]["#title"] = $GLOBALS['user']->name;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ext_user_form_user_login_alter(&$form, &$form_state)
{
  $form['name']['#title'] = t('E-Mail');
  $form['name']['#element_validate'][] = 'ext_user_login_name_validate';
}

/**
 * Form element validation handler for the user login form.
 *
 * Allows users to authenticate by username OR email.
 */
function ext_user_login_name_validate($form, &$form_state)
{
  $user = ext_user_user_load_by_login($form_state['values']['name']);
  if ($user->uid) {
    $form_state['values']['name'] = $user->name;
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_form_alter().
 */
function ext_user_form_user_profile_form_alter(&$form, &$form_state)
{
  if (!user_has_role(ROLE_ADMIN)) {
    $form["account"]["pass"]["#title"] = t('Password');
    $form["account"]["pass"]["#type"] = 'password';


    $form["field_wwork_limit"]["#access"] = false;
    $form["field_company"]["#access"] = false;
    $form["field_oc_davalec_id"]["#access"] = false;
    $form["locale"]["#access"] = false;
    $form["mimemail"]["#access"] = false;
    $form["timezone"]["#access"] = false;
    if (!user_has_role(ROLE_MANAGER_PRODUCTION)) {
      $form["field_notify_query"]["#access"] = false;
    }
    if (!user_has_role(ROLE_USER_PRODUCTION)) {
      $form["field_notify_once_a_day"]["#access"] = false;
    }
  }
}

/**
 * Загрузить пользователя по указанному логину
 * @param $login
 *
 * @return object
 */
function ext_user_user_load_by_login($login)
{
  // Try loading by email.
  if ($user = user_load_by_mail($login)) {
    return $user;
  }

  // Try loading by username.
  if ($user = user_load_by_name($login)) {
    return $user;
  }
  return user_load(0);
}

function ext_user_get_managers_by_company_uid($company_uid)
{
  $users = [];
  if (is_numeric($company_uid)) {
    $query = db_select('users', 'u');
    $query ->fields('u', ['uid']);
    $query ->innerJoin('field_data_field_company', 'fc', 'fc.entity_id = u.uid');
    $query ->condition('fc.field_company_target_id', $company_uid);
    $query ->innerJoin('users_roles', 'ur', 'ur.uid = u.uid');
    $query ->condition('ur.rid', ROLE_USER_PRODUCTION);
    $uids = $query->execute()->fetchCol();
    if ($uids) {
      $users = user_load_multiple($uids);
    }
  }

  return $users;
}

function ext_user_transfer_range($ids)
{
  foreach ($ids as $id) {
    $success = false; $error = '';
    $query_wr = entity_metadata_wrapper('query', $id);
    if ($query_wr->field_load->value()) {
      $load = [];
      foreach ($query_wr->field_load->getIterator() as $load_wr) {
        if ($load_wr->value() && $load_wr->field_produce_unit->value() && $load_wr->field_produce_date->value()) {
          $pu_tid = $load_wr->field_produce_unit->getIdentifier();
          if (!isset($load[$pu_tid])) $load[$pu_tid] = [];
          $load[$pu_tid][] = [
            'pu_tid' => $pu_tid,
            'date' => $load_wr->field_produce_date->value(),
            'output' => $load_wr->field_produce_output->value(),
          ];
        } else {
          if (!$load_wr->value()) $error = 'Пустая загрузка';
          if (!$load_wr->field_produce_unit->value()) $error = 'Пустая установка';
          if (!$load_wr->field_produce_date->value()) $error = 'Пустая дата';
        }
      }
      $query_wr->field_load_json = drupal_json_encode($load);
      if ($query_wr->save()) {
        $success = true;
      }
    } else {
      $error = 'Пустой массив загрузки';
    }

    if ($success) {
      watchdog('transfer', 'Удачно (' . $id . ')');
    } else {
      watchdog('transfer', 'Недачно. ' . $error . ' (' . $id . ')', [], WATCHDOG_ERROR);
    }
  }
}
