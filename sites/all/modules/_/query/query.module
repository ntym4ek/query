<?

/**
 * Implementation of hook_menu().
 */
function query_menu()
{
  $items['import/buzy'] = array(
    'page callback' => 'query_buzy_import',
    'access callback' => true,
    'file' => 'includes/query.import.inc',
    'type' => MENU_CALLBACK,
  );
  $items['import/plan'] = array(
    'page callback' => 'query_plan_import',
    'access callback' => true,
    'file' => 'includes/query.import.inc',
    'type' => MENU_CALLBACK,
  );
  $items['import/other'] = array(
    'page callback' => 'query_other_import',
    'access callback' => true,
    'file' => 'includes/query.import.inc',
    'type' => MENU_CALLBACK,
  );

  $items['plan/delete'] = array(
    'page callback' => 'query_plan_delete',
    'access callback' => true,
    'file' => 'includes/query.import.inc',
    'type' => MENU_CALLBACK,
  );

  $items['query/%/approve'] = array(
    'page callback' => 'query_approve_callback',
    'page arguments' => [1],
    'access callback' => true,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function query_menu_alter(&$items)
{
  // убрать материалы с Главной
  $items['node']['page callback'] = 'query_empty_front_page_callback';

  // "Удалить" в локальные задачи материала
  // http://xandeadx.ru/blog/drupal/339
  $items['node/%node/delete']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;

  // убрать восстановление пароля со страницы входа
  $items['user/password']['access callback'] = false;
}

/**
 * menu callback
 * убрать материалы с главной
 */
function query_empty_front_page_callback()
{
  drupal_set_title('');
  return [];
}

/**
 * hook_form_FORM_ID_alter
 */
function query_form_alter(&$form, &$form_state, $form_id)
{
  if ($form_id == 'eck__entity__form_add_query_query') {
    if (!empty($_GET['type']) && !empty($_GET['query_id'])) {
      $main_query_wr = entity_metadata_wrapper('query', $_GET['query_id']);

      if ($_GET['type'] == 'correction') {
        drupal_set_title('Корректирующая заявка');
        $form["field_query_type"]["und"]["#default_value"][0] = 'correction';

        if (user_has_role(ROLE_MANAGER)) {
          $form["field_query_status_client"]["und"]["#default_value"][0] = 'processing';
          $form["field_query_status_manager"]["und"]["#default_value"][0] = 'approved';
          $form["field_query_status_manager"]['#access'] = false;
        } else {
          $form["field_query_status_client"]["und"]["#default_value"][0] = 'new';
          $form["field_query_status_manager"]["und"]["#default_value"][0] = 'processing';
        }
      }
      if ($_GET['type'] == 'cancel') {
        drupal_set_title('Заявка на отмену производства');
        $form["field_query_type"]["und"]["#default_value"][0] = 'cancel';

        if (user_has_role(ROLE_MANAGER)) {
          $form["field_query_status_client"]["und"]["#default_value"][0] = 'processing';
          $form["field_query_status_manager"]["und"]["#default_value"][0] = 'approved';
          $form["field_query_status_manager"]['#access'] = false;
        } else {
          $form["field_query_status_client"]["und"]["#default_value"][0] = 'approved';
          $form["field_query_status_manager"]["und"]["#default_value"][0] = 'processing';
        }
      }

      $form["field_qty"]["und"][0]["value"]["#default_value"] = $main_query_wr->field_qty->value();
      $form["field_month"]["und"][0]["#default_value"]["value"] = $main_query_wr->field_month->value();
      $form["field_month"]["und"][0]["#default_value"]["value2"] = $main_query_wr->field_month->value();
      $form["field_nomenklatura"]["und"]["#default_value"] = [$main_query_wr->field_nomenklatura->tid->value()];
    }
  }


  if ($form_id == 'eck__entity__form_edit_query_query') {

  }


  if (in_array($form_id, ['eck__entity__form_add_query_query', 'eck__entity__form_edit_query_query'])) {

    if (!user_has_role(ROLE_ADMIN, $GLOBALS['user'])) {
      $form["field_load"]["#access"] = false;
      $form["field_query_type"]["#access"] = false;
      $form["field_query_status_client"]["#access"] = false;
      $form["field_query_status_manager"]["und"]["#title"] = 'Статус заявки';
      $form["actions"]["submit"]["#value"] = 'Сохранить и отправить';

      if (in_array($form["field_query_type"]["und"]["#default_value"][0], ['correction', 'cancel'])) {
        $form["field_nomenklatura"]['#disabled'] = true;
        $form["field_month"]['#disabled'] = true;
      }
      if ($form["field_query_type"]["und"]["#default_value"][0] == 'cancel') {
        $form["field_qty"]['#disabled'] = true;
        $form["actions"]["submit"]["#attributes"]['class'][] = 'btn-danger';
        $form["actions"]["submit"]["#value"] = 'Отменить производство';
      }

      // если Заявка создана клиентом, то менеджеру не показывать причину и необходимость согласования
      if ((!empty($form_state["query"]->is_new) && !user_has_role(ROLE_MANAGER))
        || empty($form_state["query"]->is_new) && !user_has_role(ROLE_MANAGER, user_load($form_state["query"]->uid))) {
        $form["field_query_reason"]["#access"] = false;
        $form["field_query_client_approve"]["#access"] = false;
      }

      // ограничить клиентов
      if (!user_has_role(ROLE_MANAGER, $GLOBALS['user'])) {
        $form["field_query_status_manager"]["#access"] = false;

        $form["field_query_client_approve"]["#access"] = false;
        $form["field_query_client_approve"]["und"]["#default_value"] = 1;
        // для клиента причина - по инициативе заказчика
        $form["field_query_reason"]["#access"] = false;
        $form["field_query_reason"]["und"]["#default_value"] = [553];

        // ограничить Номенклатуру текущим юзером
        // todo при добавлении новой Заявки убрать Номенклатуру,
        // todo по которой есть Заявки (одно Наименование - одна Заявка)
        $query = new EntityFieldQuery();
        $result = $query
          ->entityCondition('entity_type', 'taxonomy_term')
          ->propertyCondition('vid', taxonomy_vocabulary_machine_name_load('nomenklatura')->vid)
          ->fieldCondition('field_user', 'target_id', $GLOBALS['user']->uid)
          ->execute();
        if ($result) {
          $terms = entity_load('taxonomy_term', array_keys($result['taxonomy_term']));

          $options = [];
          foreach ($terms as $term) {
            if (!empty($form["field_nomenklatura"]["und"]["#options"][$term->tid]) && strpos($form["field_nomenklatura"]["und"]["#options"][$term->tid], '_') !== 0) {
              // todo у клиентов своё наименование
              $name = $form["field_nomenklatura"]["und"]["#options"][$term->tid];
              $options[$term->tid] = $name;
            }
          }
          if ($options) {
            $form["field_nomenklatura"]["und"]["#options"] = $options;
            if (!$form["field_nomenklatura"]["und"]["#default_value"] || empty($options[current($form["field_nomenklatura"]["und"]["#default_value"])])) {
              $form["field_nomenklatura"]["und"]["#default_value"] = [array_key_first($options)];
            }
          }
        }
      } else {
        // убрать для менеджера причины Клиента
        unset($form["field_query_reason"]["und"]["#options"][553]);
      }
    }


    $form['#attributes'] = ['class' => ['query-form']];

    if (!empty($form_state["query"]->is_new) && !empty($_GET["query_id"])) {
      $query_wr = entity_metadata_wrapper('query', $_GET["query_id"]);
    } else {
      $query_wr = entity_metadata_wrapper('query', $form_state["query"]);
    }
    if ($query_wr->value()) {
      $month_start = $query_wr->field_month->value();

      $nom_tid = null;
      if ($query_wr->field_nomenklatura->value()) {
        $nom_tid = $query_wr->field_nomenklatura->tid->value();
      } else {
        $nom_tid = empty($form["field_nomenklatura"]["und"]["#default_value"][0]) ? array_key_first($form["field_nomenklatura"]["und"]["#options"]) : $form["field_nomenklatura"]["und"]["#default_value"][0];
      }

      $form_state['data'] = [
        'id' => $query_wr->getIdentifier(),
        'main_query_id' => isset($main_query_wr) && !empty($main_query_wr->value()) ? $main_query_wr->getIdentifier() : 0,
        'is_new' => !empty($form_state['query']->is_new),
        'month' => $month_start,
        'volume' => $query_wr->field_qty->value(),
        'produce_units' => [],
      ];

      // добавить в форму выбор дат --------------------------------------------
      if ($form["field_query_type"]["und"]["#default_value"][0] != 'cancel') {
        if ($nom_tid) {
          // получить все установки, годные для производства Номенклатуры
          $produce_units = [];
          if ($form_id == 'eck__entity__form_add_query_query') {
            $produce_units = query_get_produce_units_by_product($nom_tid);
          }

          // значения Загрузки по умолчанию
          $current_load = [];
          $current_load_days = 0;
          foreach ($query_wr->field_load->getIterator() as $load_wr) {
            if ($load_wr->value()) {
              $pu_tid = $load_wr->field_produce_unit->tid->value();
              $current_load[$pu_tid][$load_wr->field_produce_date->value()] = $load_wr->field_produce_output->value();
              $current_load_days++;

              // добавить установки из Загрузки (пока нет связи Номенклатура-Установка)
              if (empty($produce_units[$pu_tid])) {
                $produce_units[$pu_tid] = [
                  'tid' => $pu_tid,
                  'name' => $load_wr->field_produce_unit->name->value(),
                  'performance' => query_get_product_unit_performance_by_nomenklatura($pu_tid, $nom_tid),
                ];
              }
            }
          }

          $form_state['data']['produce_units'] = $produce_units;

          if ($produce_units) {
            foreach ($produce_units as $pu_tid => $produce_unit) {
              $produce_unit_load = query_get_produce_unit_load($pu_tid, $month_start);

              $form['produce_unit_' . $pu_tid] = [
                '#type' => 'container',
                '#attributes' => ['class' => ['produce-unit']],
                '#weight' => 3,
              ];
              $form['produce_unit_' . $pu_tid]['name'] = [
                '#type' => 'item',
                '#title' => 'Установка',
                '#markup' => '<h3>' . $produce_unit['name'] . '</h3>',
                '#wrapper_attributes' => ['class' => ['produce-unit-name']],
              ];

              $form['produce_unit_' . $pu_tid]['selection'] = [
                '#type' => 'container',
                '#attributes' => ['class' => ['produce-unit-dates', 'form-item']],
              ];
              $form['produce_unit_' . $pu_tid]['selection']['title'] = [
                '#markup' => '<label class="control-label">Даты</label>',
              ];

              $form['produce_unit_' . $pu_tid]['selection']['dates'] = [
                '#type' => 'container',
                '#attributes' => ['class' => ['form-checkboxes']],
                '#suffix' => '<div class="produce-unit-legenda"><span></span>- установка свободна <span class="unavailable"></span>- установка недоступна <span class="loaded"></span>- установка занята <span class="selected"></span>- выбранные даты</div>',
              ];

              // цикл по количеству дней в месяце
              for ($i = 1; $i <= date("t", $month_start); $i++) {

                //      $today_start = gmmktime(0, 0, 0, date('n', 1608467456), date('j', 1608467456), date('Y', 1608467456));
                $today_start = gmmktime(0, 0, 0, date('n', time()), date('j', time()), date('Y', time()));
                $day_start = $month_start + ($i - 1) * 60 * 60 * 24;

                // для текущей Номенклатуры занятость не выводим (в случае заполнения корректирующей Заявки)
                $produce_unit_is_busy = !empty($produce_unit_load[$day_start]) && $produce_unit_load[$day_start]['nomenklatura']['tid'] != $nom_tid;
                $produce_unit_has_current_load = !empty($current_load[$pu_tid][$day_start]);

                // дата недоступна для выбора в корректирующей Заявке для Клиента до сегодня и ещё спустя три дня
                $produce_unit_is_unavailable = !user_has_role(ROLE_ADMIN)
                  && !user_has_role(ROLE_MANAGER)
                  && ($day_start < $today_start + 3 * 24 * 60 * 60)
                  && in_array($query_wr->field_query_type->value(), ['main', 'correction']); // данные могут быть получены из начальной и корректирующей

                // вывести подсказку при наведении с выходом продукции в этот день
                $classes = [];
                if ($produce_unit_is_busy && !$produce_unit_has_current_load) $classes[] = 'loaded';
                if ($produce_unit_has_current_load) $classes[] = 'selected';
                if ($produce_unit_is_unavailable && !$produce_unit_has_current_load) $classes[] = 'unavailable';
                $tooltip = empty($current_load[$pu_tid][$day_start]) ? '' : ' data-toggle="tooltip" data-placement="top" title="' . $current_load[$pu_tid][$day_start] . '"';

                // при создании заявки даты можно выбирать, при редактировании нет
                if (!empty($form_state['query']->is_new)) {
                  $form['produce_unit_' . $pu_tid]['selection']['dates']['check_' . $pu_tid . '_' . $i] = [
                    '#type' => 'checkbox',
                    '#title' => '<span>' . $i . '</span>',
                    '#disabled' => ($produce_unit_is_busy && !$produce_unit_has_current_load) || $produce_unit_is_unavailable,
                    '#default_value' => $produce_unit_has_current_load,
                    '#attributes' => ['class' => $classes],
                  ];
                  if ($tooltip) {
                    $form['produce_unit_' . $pu_tid]['selection']['dates']['check_' . $pu_tid . '_' . $i]['#wrapper_attributes'] = [
                      'data-toggle' => 'tooltip',
                      'data-placement' => 'top',
                      'title' => $current_load[$pu_tid][$day_start],
                    ];
                  }
                } else {
                  $form['produce_unit_' . $pu_tid]['selection']['dates']['check_' . $pu_tid . '_' . $i]['#markup'] = '<span class="c-box ' . implode(' ', $classes) . '"' . $tooltip . '>' . $i . '</span>';
                }
              }
            }
          }
        }
        $form["#submit"][] = 'query_form_eck__entity__form_query_query_submit';
      }
    }

    // ajax кнопки выбора номенклатуры для смены Установки при смене Наименования
    if (!$form['field_nomenklatura']['#disabled']) {
      $form["fn_wrapper"] = [
        '#prefix' => '<div id="field-nomenklatura">',
        '#suffix' => '</div>',
        '#weight' => 1,
      ];
      $form["fn_wrapper"]['field_nomenklatura'] = $form['field_nomenklatura'];
      $form["fn_wrapper"]['field_nomenklatura']['#ajax'] = [
          'callback' => '',
          'wrapper' => 'field-nomenklatura',
          'trigger_as' => array('name' => 'field_nomenklatura_submit')
      ];
      unset($form['field_nomenklatura']);
      $form["fn_wrapper"]['field_nomenklatura_submit'] = array(
        '#type' => 'submit',
        '#value' => 'Показать установки',
        // При отправки формы с помощью этой кнопки, валидацию будет проходить только поле fields_count
        '#limit_validation_errors' => [['field_nomenklatura']],
        '#submit' => ['query_form_query_add_field_nomenklatura_change'],
        '#ajax' => array(
          'callback' => 'query_form_query_add_field_nomenklatura_change_ajax',
          'wrapper' => 'field-nomenklatura',
        ),
        '#weight' => 3,
      );
    }

    $form["field_comment"]["und"][0]["#required"] = user_has_role(ROLE_MANAGER) ? false : true;

    $form["#validate"][] = 'query_form_eck__entity__form_query_query_validate';
  }

  // дополнительный обработчик сабмита
  if (in_array($form_id, ['eck__entity__form_add_query_query', 'eck__entity__form_edit_query_query', 'eck__entity__delete_form'])) {
    $form["#submit"][] = 'query_form_redirect_submit';
  }
}


function query_form_query_add_field_nomenklatura_change()
{

}

function query_form_query_add_field_nomenklatura_change_ajax($form, &$form_state)
{
  return $form['field_nomenklatura_wrapper'];
}

/**
 * query_form_eck__entity__form validate callback
 */
function query_form_eck__entity__form_query_query_validate(&$form, &$form_state)
{
  // обычно месяц задан и не доступен для смены
  if (!empty($form_state["data"]['month'])) {
    $form_state["values"]["field_month"]["und"][0]["value"] = $form_state["data"]['month'];
    $form_state["values"]["field_month"]["und"][0]["value2"] = $form_state["data"]['month'];
  }

  // когда менеджер сохраняет заявку со статусом Утверждено И требуется согласование, поменять статус клиента на На рассмотрении
  if ($form_state["values"]["field_query_status_manager"]["und"][0]["value"] == 'approved') {
    if (!empty($form_state["query"]->is_new) && $form_state["values"]["field_query_client_approve"]["und"][0]["value"]) {
      $form_state["values"]["field_query_status_client"]["und"][0]["value"] = 'processing';
    } else {
      $form_state["values"]["field_query_status_client"]["und"][0]["value"] = 'approved';
    }
  }
}

/**
 * query_form_eck__entity__form submi callback
 */
function query_form_eck__entity__form_query_query_submit(&$form, &$form_state)
{
  // сохранить выбранные даты, если есть выбор дат
  $load = [];
  $month_start = $form_state["data"]["month"] ? $form_state["data"]["month"] : $form_state["values"]["field_month"]["und"][0]["value"];
  $volume = $form_state["values"]["field_qty"]["und"][0]["value"];
  // Загрузку сохраняем только для новых Заявок
  if ($form_state['data']['is_new'] && isset($form_state["data"]["produce_units"])) {
    foreach ($form_state["data"]["produce_units"] as $produce_unit_tid => $produce_unit) {
      $performance = $produce_unit["performance"];
      // сформировать Загрузку для выбранной установки
      $i = 0;
      foreach ($form_state['values'] as $key => $value) {
        if (strpos($key, 'check_' . $produce_unit_tid) === 0 && $value === 1) {
          $day = str_replace('check_' . $produce_unit_tid . '_', '', $key);
          $day_start = $month_start + ($day - 1) * 60 * 60 * 24;
          // вычислить выход на день (Производительность или Остаток)
          $output = $volume - $i * $performance['amount'] >= $performance['amount'] ? $performance['amount'] : $volume - $i * $performance['amount'];
          if ($output <= 0) break;
          $i++;

          $load[] = [
            'field_produce_unit' => $produce_unit_tid,
            'field_produce_date' => $day_start,
            'field_produce_output' => $output,
          ];
        }
      }
    }
    query_query_load_update($form_state["query"]->id, $load);
  }

  // статус старой Заявки изменить на Отказано
  if (!empty($form_state["data"]["main_query_id"])) {
    $main_query_wr = entity_metadata_wrapper('query', $form_state["data"]["main_query_id"]);
    if ($main_query_wr->field_query_status_manager->value() == 'processing') {
      $main_query_wr->field_query_status_manager = 'deny';
      $main_query_wr->save();
    }
  }
}

function query_form_redirect_submit(&$form, &$form_state)
{
  // отправить письмо
//  $params['qid'] = $form_state["values"]["entity"]->id;
//  $params['period'] = ['value' => $form_state["values"]["field_period"]["und"][0]["value"], 'value2' => $form_state["values"]["field_period"]["und"][0]["value2"]];
//  $params['country'] = $form_state["values"]["field_country"]["und"][0]["value"];
//  $params['product'] = $form_state["values"]["field_product"]["und"][0]["value"];
//  $params['package'] = taxonomy_term_load($form_state["values"]["field_package"]["und"][0]["tid"])->name;
//  $params['qty'] = $form_state["values"]["field_qty"]["und"][0]["value"];
//  drupal_mail('mailer', 'manager_notify_new_query', MANAGER_EMAIL, language_default(), $params);

  if (!user_has_role(ROLE_ADMIN)) {
    $form_state['redirect'] = user_has_role(ROLE_MANAGER) ? 'manage' : 'queries';
  }
}

function query_entity_insert($entity)
{
  if ($entity->entityType() == 'query' && $entity->bundle() == 'query') {
    $changed_by = user_has_role(ROLE_MANAGER) ? 'manager' : 'client';
    $query_wr = entity_metadata_wrapper('query', $entity);
    $params = [
      'qid' => $query_wr->getIdentifier(),
      'month' => date('F', $query_wr->field_month->value()),
      'product' => $query_wr->field_nomenklatura->name->value(),
      'product_owner_account' => $query_wr->field_nomenklatura->field_user->value(),
      'status_client' => $query_wr->field_query_status_client->label(),
      'status_manager' => $query_wr->field_query_status_manager->label(),
      'reason' => $query_wr->field_query_reason->name->value(),
      'client_approve' => $query_wr->field_query_client_approve->value(),
      'type' => $query_wr->field_query_type->value(),
      'comment' => $query_wr->field_comment->value(),
    ];
    if ($changed_by == 'client') {
      if ($managers = query_get_managers_to_notify()) {
        foreach ($managers as $manager) {
          if ($query_wr->field_query_type->value() == 'correction') {
            drupal_mail('mailer', 'manager_notify_query_correction_new', $manager->mail, user_preferred_language($manager), $params);
          }
          if ($query_wr->field_query_type->value() == 'cancel') {
            drupal_mail('mailer', 'manager_notify_query_cancel_new', $manager->mail, user_preferred_language($manager), $params);
          }
        }
      }
    } else {
      if ($query_wr->field_query_type->value() == 'correction') {
        drupal_mail('mailer', 'client_notify_query_correction_new', $params['product_owner_account']->mail, user_preferred_language($params['product_owner_account']), $params);
      }
      if ($query_wr->field_query_type->value() == 'cancel') {
        drupal_mail('mailer', 'client_notify_query_cancel_new', $params['product_owner_account']->mail, user_preferred_language($params['product_owner_account']), $params);
      }
    }
  }
}

function query_entity_update($entity, $type)
{
  if ($entity->entityType() == 'query' && $entity->bundle() == 'query') {
    $changed_by = user_has_role(ROLE_MANAGER) ? 'manager' : 'client';
    $query_wr = entity_metadata_wrapper('query', $entity);
    $params = [
      'qid' => $query_wr->getIdentifier(),
      'month' => date('F', $query_wr->field_month->value()),
      'product' => $query_wr->field_nomenklatura->name->value(),
      'product_owner_account' => $query_wr->field_nomenklatura->field_user->value(),
      'status_client' => $query_wr->field_query_status_client->label(),
      'status_manager' => $query_wr->field_query_status_manager->label(),
      'reason' => $query_wr->field_query_reason->name->value(),
      'client_approve' => $query_wr->field_query_client_approve->value(),
      'type' => $query_wr->field_query_type->value(),
      'comment' => $query_wr->field_comment->value(),
    ];

    if ($changed_by == 'client') {
      if ($entity->original->field_query_status_client["und"][0]["value"] != $entity->field_query_status_client["und"][0]["value"]) {
        if ($managers = query_get_managers_to_notify()) {
          foreach ($managers as $manager) {
            drupal_mail('mailer', 'manager_notify_query_handling', $manager->mail, user_preferred_language($manager), $params);
          }
        }
      }
    } else {
      drupal_mail('mailer', 'client_notify_query_handling', $params['product_owner_account']->mail, user_preferred_language($params['product_owner_account']), $params);
    }
  }
}


function query_get_managers_to_notify()
{
  $dbr = db_select('users', 'u');
  $dbr->innerJoin('users_roles', 'ur', 'ur.uid = u.uid');
  $dbr->condition('ur.rid', ROLE_MANAGER);
  $dbr->innerJoin('field_data_field_notify_query', 'nq', 'nq.entity_id = u.uid');
  $dbr->condition('nq.field_notify_query_value', 1);
  $dbr->addField('u', 'uid');
  return ($result = $dbr->execute()->fetchCol()) ? user_load_multiple($result, []) : false;
}

/**
 * Implements hook_views_api().
 */
function query_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'query') . '/views',
  );
}

/**
 * Implements hook_views_data_alter().
 */
function query_views_data_alter(&$data)
{
  $data['eck_query']['produce_units_form'] = array(
    'field' => array(
      'title' => t('Produce units'),
      'help' => t('View and select produce units.'),
      'handler' => 'query_handler_field_produce_units_form',
    ),
  );
  $data['eck_query']['actions'] = array(
    'field' => array(
      'title' => t('Actions'),
      'help' => t('Conditional actions'),
      'handler' => 'query_handler_field_actions',
    ),
  );
  $data['eck_query']['comment'] = array(
    'field' => array(
      'title' => t('Formatted Comment'),
      'handler' => 'query_handler_field_comment',
    ),
  );
  $data['taxonomy_term_data']['produce_unit_load'] = array(
    'field' => array(
      'title' => t('Produce Unit Load'),
      'help' => t('Produce Unit Load'),
      'handler' => 'query_handler_field_produce_unit_load',
    ),
  );
}

/**
 * Implements hook_views_pre_render().
 */
function query_views_pre_render(&$view)
{
  if ($view->name == 'queries' && $view->current_display == 'page_1') {
    if (!empty($view->filter["field_month_value"]->value["value"])) {
      // проверка на наличие Заявок на подтверждение
      $queries = [];
      foreach ($view->result as $row) {
        if ($row->field_field_query_status_client[0]["raw"]["value"] == 'processing') {
          $efquery = new EntityFieldQuery();
          $has_correction = $efquery
            ->entityCondition('entity_type', 'query')
            ->propertyCondition('created', $row->eck_query_created, '>')
            ->fieldCondition('field_month', 'value', $row->field_field_month[0]["raw"]["value"])
            ->fieldCondition('field_nomenklatura', 'target_id', $row->field_field_nomenklatura[0]["raw"]["target_id"])
            ->count()
            ->execute();

          if (!$has_correction) $queries[] = $row->id;
        }
      }

      // вывести кнопку Согласовать все
      if ($queries) {
        $view->attachment_before = '<a href="/query/' . implode('+', $queries) . '/approve" class="btn btn-success">Согласовать весь план</a>';
      }
    }

    // добавить кнопку Новая заявка (Торговые Дома)
    if (in_array($GLOBALS['user']->uid,[91, 80])) {
      $view->attachment_before = (empty($view->attachment_before) ? '' : $view->attachment_before) . '<a href="/admin/structure/entity-type/query/query/add" class="btn btn-primary">Новая заявка</a>';
    }
  }



  if ($view->name == 'produced_nomenklatura' && $view->current_display == 'page') {
    // определяем последнюю Заявку по Номенклатуре
    $nom_result_arr = [];
    foreach($view->result as $result_item) {
      if (empty($nom_result_arr[$result_item->tid]) || $nom_result_arr[$result_item->tid]->field_nomenklatura_taxonomy_term_data_created < $result_item->field_nomenklatura_taxonomy_term_data_created) {
        $nom_result_arr[$result_item->tid] = $result_item;
      }
    }

    // исключаем ненужные из вывода
    $result = [];
    foreach($view->result as $result_item) {
      if (isset($nom_result_arr[$result_item->tid]) && !empty($nom_result_arr[$result_item->tid]->eck_load_field_data_field_load__field_data_field_produce_uni)) {
        $result[] = $result_item;
      }
    }
    $view->result = $result;
  }
}

/**
 * hook_preprocess_views_view_unformatted()
 */
function query_preprocess_views_view_unformatted(&$vars)
{
  // добавить класс строке основного Запроса, если есть корректирующий
  if (in_array($vars['view']->name, ['queries', 'manager_queries']) && $vars['view']->current_display == 'page_1') {
    foreach ($vars["classes"] as $key => $value) {
      // если есть Корректировки, наложить штамп "ИЗМЕНЕНА"
      $efquery = new EntityFieldQuery();
      $has_correction = $efquery
        ->entityCondition('entity_type', 'query')
        ->propertyCondition('created', $vars["view"]->result[$key]->eck_query_created, '>')
        ->fieldCondition('field_month', 'value', $vars["view"]->result[$key]->field_field_month[0]["raw"]["value"])
        ->fieldCondition('field_nomenklatura', 'target_id', $vars["view"]->result[$key]->field_field_nomenklatura[0]["raw"]["target_id"])
        ->count()
        ->execute();
      if ($has_correction) {
        $vars["classes_array"][$key] .= ' locked';
      } else {
        // если дата производства наступила - наложить штамп "ПРОИЗВОДИТСЯ"
        if (query_check_query_produce_started($vars["view"]->result[$key]->id)) {
          $vars["classes_array"][$key] .= ' producing';
        }
      }

      if (user_has_role(ROLE_MANAGER)) {
        if ($vars["view"]->result[$key]->field_field_query_status_manager[0]["raw"]["value"] == 'processing') {
          $vars["classes_array"][$key] .= ' attention';
        }
        if ($vars["view"]->result[$key]->field_field_query_status_client[0]["raw"]["value"] == 'processing') {
          $vars["classes_array"][$key] .= ' processing';
        }
      } else {
        if ($vars["view"]->result[$key]->field_field_query_status_client[0]["raw"]["value"] == 'processing') {
          $vars["classes_array"][$key] .= ' attention';
        }
        if ($vars["view"]->result[$key]->field_field_query_status_manager[0]["raw"]["value"] == 'processing') {
          $vars["classes_array"][$key] .= ' processing';
        }
      }
    }
  }

  if ($vars['view']->name == 'produce_units_load' && $vars['view']->current_display == 'page') {
    $vars["view"]->attachment_before = '<div class="produce-unit-legenda"><span></span>- установка свободна <span class="service"></span>- установка на обслуживании <span class="loaded"></span>- установка загружена</div>';
  }
}

/**
 * hook_preprocess_views_view_field()
 */
function query_preprocess_views_view_field(&$vars)
{
  if ($vars["view"]->name == 'queries' && isset($vars["field"]->field_info["field_name"])) {
    if ($vars["field"]->field_info["field_name"] == 'field_nomenklatura') {
      $name = [];
      $artikul = empty($vars["row"]->field_field_oc_artikul_davalec[0]["raw"]["value"]) ? '' : $vars["row"]->field_field_oc_artikul_davalec[0]["raw"]["value"];
      if ($artikul) $name[] = $artikul;
      $title = empty($vars["row"]->field_field_oc_name_davalec[0]["raw"]["value"]) ? $vars["output"] : $vars["row"]->field_field_oc_name_davalec[0]["raw"]["value"];
      if ($title) $name[] = $title;
      if ($name) {
        $vars["output"] = implode(' ', $name);
      }
    }

    if ($vars["field"]->field_info["field_name"] == 'field_query_status_client') {
      // если Заявка без согласования с клиентом, то есго статус помениять с Согласовано на Уведомление
      if ($vars["row"]->field_field_query_status_client[0]["raw"]["value"] == 'approved'
        && isset($vars["row"]->field_field_query_client_approve[0]["raw"]["value"]) && $vars["row"]->field_field_query_client_approve[0]["raw"]["value"] == 0
       ) {
        $vars["output"] = 'Уведомление';
      }
    }
  }
}


/**
 * обновить Загрузку в Запросе
 */
function query_query_load_update($query_id, $load_array)
{
  $query_wr = entity_metadata_wrapper('query', $query_id);
  if ($query_wr->value()) {
    // удалить старые записи
    $ids = [];
    foreach ($query_wr->field_load->getIterator() as $field_load_wr) {
      $ids[] = $field_load_wr->getIdentifier();
    }
    entity_delete_multiple('load', $ids);
    $query_wr->field_load->set(null);

    // создать новые
    foreach ($load_array as $load_item) {
      $load = entity_create('load', ['type' => 'load']);
      $load_wr = entity_metadata_wrapper('load', $load);
      $load_wr->field_produce_unit = $load_item['field_produce_unit'];
      $load_wr->field_produce_date = $load_item['field_produce_date'];
      $load_wr->field_produce_output = $load_item['field_produce_output'];
      $load_wr->save();
      $query_wr->field_load[] = $load_wr->getIdentifier();
    }

    $query_wr->save();
  }
}

function query_get_produce_unit_by_1cID($produce_unit_1cID)
{
  $vid = taxonomy_vocabulary_machine_name_load('produce_units')->vid;
  $query = new EntityFieldQuery();
  $terms = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $vid)
    ->fieldCondition('field_oc_produce_unit_id', 'value', $produce_unit_1cID)
    ->execute();

  if ($terms) {
    $entities = entity_load('taxonomy_term', [current($terms['taxonomy_term'])->tid]);
  }
  return empty($entities) ? false: current($entities);
}

function query_get_nomenklatura_by_artikul($articul)
{
  $nom_vid = taxonomy_vocabulary_machine_name_load('nomenklatura')->vid;
  $query = new EntityFieldQuery();
  $terms = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $nom_vid)
    ->fieldCondition('field_oc_artikul', 'value', $articul)
    ->execute();
  if ($terms) {
    $entities = entity_load('taxonomy_term', [current($terms['taxonomy_term'])->tid]);
  }
  return empty($entities) ? false: current($entities);
}

/**
 * query_get_product_unit_performance_by_nomenklatura
 * @return array
 */
function query_get_product_unit_performance_by_nomenklatura($pu_tid, $nom_tid)
{
  $output = [];
  // todo заменить тестовые данные
//  if ($pu_tid == 93 && $nom_tid == 301) {
    $output = [
      'amount' => 10000,
      'unit' => 'л',
    ];
//  }
  return $output;
}

/**
 * get_produce_units_by_product
 */
function query_get_produce_units_by_product($nom_tid)
{
  if (!is_numeric($nom_tid)) return false;

  // вернуть список установок с производительностью, используемых для производства заданного продукта
  $units = [];

  $nom_wr = entity_metadata_wrapper('taxonomy_term', $nom_tid);
  if ($nom_wr->value()) {
    foreach ($nom_wr->field_produce_units->getIterator() as $performance_wr) {
      $units[$performance_wr->field_produce_unit->getIdentifier()] = [
        'tid' => $performance_wr->field_produce_unit->getIdentifier(),
        'name' => $performance_wr->field_produce_unit->name->value(),
        'performance' => [
          'amount' => $performance_wr->field_produce_unit_output->value(),
          'unit' => 'л',
        ]
      ];
    }
  }

  return $units;
}

/**
 * get_produce_unit_load
 */
function query_get_produce_unit_load($produce_unit_tid, $month_start, $date = null)
{
  // todo добавить учёт даты в месяце, до которой нужно вернуть загрузку,
  // todo так как:
  // todo 1. в списке каждая следующая заявка должна отображать утверждённую занятость в зависимости от предыдущих
  // todo 2. если запрошенные даты двух заявок пересекаются, то нужно выделить цветом для второй, что установка уже занята
  // todo    и менеджеру нужно перенести запрос на свободные даты

  // вернуть список периодов загрузки заданной установки на заданный месяц
  // учитывать нужно только утверждённые заявки
  // Загрузку нужно возвращать с привязкой к Номенклатуре,
  //   например,
  //   чтобы в корректирующих Заявке не выводить Загрузку из основной Заявки,
  //   т.к нужна возможность распределить её на эти даты снова
  $load_array = [];

  $ids = [];
  // начальные Заявки месяца
  $efquery = new EntityFieldQuery();
  $result_main = $efquery
    ->entityCondition('entity_type', 'query')
    ->fieldCondition('field_month', 'value', $month_start)
    ->fieldCondition('field_query_status_client', 'value', ['approved', 'processing'], 'IN')
    ->fieldCondition('field_query_status_manager', 'value', 'approved')
    ->fieldCondition('field_query_type', 'value', 'main')
    ->execute();
  if ($result_main) {
    $ids = array_keys($result_main['query']);
  }

  // утверждённые Корректировки и Отмены
  $efquery = new EntityFieldQuery();
  $efquery
    ->entityCondition('entity_type', 'query')
    ->fieldCondition('field_query_type', 'value', 'main', '!=')
    ->fieldCondition('field_month', 'value', $month_start)
    ->fieldCondition('field_query_status_client', 'value', 'approved')
    ->fieldCondition('field_query_status_manager', 'value', 'approved');
  if ($date) {
    $efquery->propertyCondition('created',  $date, '<');
  }
  if ($result = $efquery->execute()) {
    $ids = array_merge($ids, array_keys($result['query']));
  }

  if ($ids) {
    $load_nomenklatura = [];
    $queries = entity_load('query', $ids);

    // исключить неактуальные Заявки (для которых есть корректировки)
    // (оставляем последнюю утверждённую для Номенклатуры)
    // Заявка на отмену не должна содержать загрузку, так как отсутствие Загрузки и будет отменой
    foreach ($queries as $query) {
      $query_wr = entity_metadata_wrapper('query', $query);
      $nom_tid = $query_wr->field_nomenklatura->tid->value();
      if (empty($nom_query[$nom_tid]['created']) || $nom_query[$nom_tid]['created'] < $query_wr->created->value()) {
        $nom_query[$nom_tid] = [
          'query_id' => $query_wr->getIdentifier(),
          'created' => $query_wr->created->value(),
        ];
      }
    }

    foreach ($queries as $query) {
      $query_wr = entity_metadata_wrapper('query', $query);
      $nom_tid = $query_wr->field_nomenklatura->tid->value();
      if ($nom_query[$nom_tid]['query_id'] == $query->id) {
        foreach ($query_wr->field_load->getIterator() as $load_wr) {
          $load_nomenklatura[$load_wr->getIdentifier()] = [
            'tid' => $nom_tid,
            'name' => $query_wr->field_nomenklatura->name->value(),
            'client_id' => $query_wr->field_nomenklatura->field_user->uid->value(),
          ];
        }
      }
    }

    // Загрузка для заданной Установки
    if ($load_nomenklatura) {
      $load = entity_load('load', array_keys($load_nomenklatura));
      foreach ($load as $load_item) {
        if ($load_item->field_produce_unit["und"][0]["tid"] == $produce_unit_tid) {
          $load_array[$load_item->field_produce_date["und"][0]["value"]] = [
            'amount' => $load_item->field_produce_output["und"][0]["value"],
            'nomenklatura' => $load_nomenklatura[$load_item->id],
          ];
        }
      }
    }

    // пустая Загрузка (ремонт, ТО)
    $next_month_start = gmmktime(0,0,0, date('n', $month_start)+1, date('j', $month_start), date('Y', $month_start));

    $efquery = new EntityFieldQuery();
    $result = $efquery
      ->entityCondition('entity_type', 'load')
      ->fieldCondition('field_produce_date', 'value', $month_start, '>=')
      ->fieldCondition('field_produce_date', 'value', $next_month_start, '<')
      ->fieldCondition('field_produce_output', 'value', 0)
      ->execute();
    if ($result) {
      $load = entity_load('load', array_keys($result['load']));
      foreach ($load as $load_item) {
        if ($load_item->field_produce_unit["und"][0]["tid"] == $produce_unit_tid) {
          $load_array[$load_item->field_produce_date["und"][0]["value"]] = [
            'amount' => 0,
            'nomenklatura' => ['tid' => 0, 'client_id' => 0, 'name' => 'Технические работы'],
          ];
        }
      }
    }
  }

  return $load_array;
}

/**
 * Implements hook_entity_delete().
 */
function query_entity_delete($entity, $type)
{
  // при удалении Запроса удалить всю Загрузку
  if ($entity->type == 'query') {
    if (!empty($entity->field_load['und'])) {
      $ids = [];
      foreach ($entity->field_load['und'] as $item) {
        $ids[] = $item['target_id'];
      }
      entity_delete_multiple('load', $ids);
    }
  }
}

function query_get_messages_html($data)
{
  $messages_html = '';
  if ($messages = unserialize($data)) {
    foreach ($messages as $time => $message) {
      $messages_html .=
        '<div>' .
        '<div>' . date('d.m.y h:m', $time) . '</div>' .
        '<div>' . ($message['from'] == 'user' ? '&nbsp;>>&nbsp;' : '&nbsp;<<&nbsp;') . '</div>' .
        '<div>' . $message['message'] . '</div>' .
        '</div>';
    }
  }

  return '<div>' . $messages_html . '</div>';
}


/**
 * query_approve_callback
 * обработчик кновки согласования
 */
function query_approve_callback($data)
{
  $queries = explode(' ', $data);
  if ($queries) {
    foreach($queries as $query_id) {
     query_query_approve($query_id);
    }
    if (count($queries) == 1) {
      drupal_set_message('Заявка ' . $query_id . (user_has_role(ROLE_MANAGER) ? ' утверждена' : ' согласована'));
    } else {
      drupal_set_message('План согласован');
    }
  }

  drupal_goto('<front>');
}

/**
 * @param $query_id
 * смена статуса Заявки клиента
 */
function query_query_approve($query_id)
{
  $query_wr = entity_metadata_wrapper('query', $query_id);
  if ($query_wr->value()) {
    // менеджер или клиент
    if (user_has_role(ROLE_MANAGER)) {
      $query_wr->field_query_status_manager = 'approved';
      $query_wr->save();
    } else {
      // проверка прав
      if ($query_wr->field_nomenklatura->field_user->uid->value() == $GLOBALS['user']->uid) {
        $query_wr->field_query_status_client = 'approved';
        $query_wr->save();
      }
    }
  }

  return true;
}

/**
 * проверка, началось ли производство по Заявке
 * @param $query
 * @return bool
 */
function query_check_query_produce_started($query)
{
  $today_start = gmmktime(0, 0, 0, date('n', time()), date('j', time()), date('Y', time()));
  $query_wr = entity_metadata_wrapper('query', $query);
  foreach ($query_wr->field_load->getIterator() as $load_wr) {
    if ($load_wr->value()) {
      // за сутки до начала производства и позже - производство началось
      if ($today_start > $load_wr->field_produce_date->value() - 24*60*60) {
        return true;
      }
    }
  }

  return false;
}
