<?

define('DAYS_BEFORE_PRODUCE_START', 1);
// Кол-во дней, которое начиная с текущей даты установка недоступна
// для выбора дат производства.
// Время нужно для согласования и подготовки установки к началу производства.
define('DAYS_UNAVAILABLE', 3);

/**
 * Implementation of hook_menu().
 */
function query_menu()
{
  $items['import/buzy'] = array(
    'page callback' => 'query_buzy_import',
    'access callback' => true,
    'file' => 'includes/query.import.inc',
    'type' => MENU_CALLBACK,
  );
  $items['import/plan'] = array(
    'page callback' => 'query_plan_import',
    'access callback' => true,
    'file' => 'includes/query.import.inc',
    'type' => MENU_CALLBACK,
  );
  $items['import/other'] = array(
    'page callback' => 'query_other_import',
    'access callback' => true,
    'file' => 'includes/query.import.inc',
    'type' => MENU_CALLBACK,
  );

  $items['plan/delete'] = array(
    'page callback' => 'query_plan_delete',
    'access callback' => true,
    'file' => 'includes/query.import.inc',
    'type' => MENU_CALLBACK,
  );

  $items['query/plan/%/approve'] = array(
    'page callback' => 'query_plan_approve_callback',
    'page arguments' => [2],
    'access callback' => true,
    'type' => MENU_CALLBACK,
  );

  $items['query/%/approve'] = array(
    'page callback' => 'query_approve_callback',
    'page arguments' => [1],
    'access callback' => true,
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/query'] = array(
    'title' => 'Заявки',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('query_import_form'),
    'access arguments' => array('access manager settings'),
    'file' => 'includes/query.import.inc',
  );
  $items['admin/config/query/import'] = array(
    'title' => 'Импорт',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/query/delete'] = array(
    'title' => 'Удаление заявок',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('query_delete_form'),
    'access arguments' => array('access manager settings'),
    'file' => 'includes/query.import.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function query_menu_alter(&$items)
{
  // убрать материалы с Главной
  $items['node']['page callback'] = 'query_empty_front_page_callback';

  // "Удалить" в локальные задачи материала
  // http://xandeadx.ru/blog/drupal/339
  $items['node/%node/delete']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;

  // убрать восстановление пароля со страницы входа
  $items['user/password']['access callback'] = false;
}

/**
 * menu callback
 * убрать материалы с главной
 */
function query_empty_front_page_callback()
{
  drupal_set_title('');
  return [];
}

/**
 * hook_form_FORM_ID_alter
 */
function query_form_alter(&$form, &$form_state, $form_id)
{
  if (!user_has_role(ROLE_ADMIN) && $form_id == 'views_exposed_form' && !empty($form["field_nomenklatura_target_id_selective"])) {
    $tids = array_keys($form["field_nomenklatura_target_id_selective"]["#options"]);
    array_shift($tids);
    if ($terms = entity_load('taxonomy_term', $tids)) {
      foreach($form["field_nomenklatura_target_id_selective"]["#options"] as $tid => &$name) {
        if (!empty($terms[$tid])) {
          $name_arr = [];
          if (!empty($terms[$tid]->field_oc_artikul_davalec["und"][0]["value"])) {
            $name_arr[] = $terms[$tid]->field_oc_artikul_davalec["und"][0]["value"];
          }
          $name_arr[] = !empty($terms[$tid]->field_oc_name_davalec["und"][0]["value"]) ? $terms[$tid]->field_oc_name_davalec["und"][0]["value"] : $name;
          $name = implode(' ', $name_arr);
        }
      }
    }
  }

  if ($form_id == 'eck__entity__form_add_query_query' && !user_has_role(ROLE_ADMIN)) {
    if (!empty($_GET['type'])) {
      $form_state['data']['query']['type'] = $_GET['type'];
    }

    $form_state['data']['davalec_uid'] = $GLOBALS['user']->uid;

    $filter = [];
    if (!empty($_SESSION["views"]["queries"]["default"]["field_month_value"]["value"]["month"])) {
      $filter = $_SESSION["views"]["queries"]["default"]["field_month_value"]["value"];
      $form_state['data']['filter'] = $filter;
    }

    // получить Запрос с которого сделана Корректировка
    if (!empty($_GET['last_query_id'])) {
      $last_query_wr = entity_metadata_wrapper('query', $_GET['last_query_id']);
      $form_state['data']['month_start'] = $last_query_wr->field_month->value();
      $form_state['data']['nom_tid'] = $last_query_wr->field_nomenklatura->tid->value();
      $form_state['data']['last_query'] = [
        'id' => $last_query_wr->getIdentifier(),
        'type' => $last_query_wr->field_query_type->value(),
        'volume' => $last_query_wr->field_qty->value(),
      ];
    }

    // получить Запрос, в котором есть Загрузка
    if (!empty($form_state['data']['last_query']['volume']) && !empty($form_state['data']['nom_tid']) && !empty($form_state['data']['month_start'])) {
      $dbr = db_select('eck_query', 'q');
      $dbr->addField('q', 'id');
      $dbr->innerJoin('field_data_field_month', 'fm', 'fm.entity_id = q.id');
      $dbr->condition('fm.field_month_value', $form_state['data']['month_start']);
      $dbr->innerJoin('field_data_field_nomenklatura', 'fn', 'fn.entity_id = q.id');
      $dbr->condition('fn.field_nomenklatura_target_id', $form_state['data']['nom_tid']);
      $dbr->innerJoin('field_data_field_load', 'fl', 'fl.entity_id = q.id');
      $dbr->orderBy('q.id','DESC');
      $dbr->range(0,1);
      if ($eck_source = $dbr->execute()->fetchField()) {
        $source_query_wr = entity_metadata_wrapper('query', $eck_source);
        $load = [];
        $date_start = $date_end = 0;
        foreach ($source_query_wr->field_load->getIterator() as $load_wr) {
          if ($load_wr->value()) {
            $load[$load_wr->field_produce_date->value()] = $load_wr->field_produce_output->value();
            if ($load_wr->field_produce_output->value()) {
              if (!$date_start || $date_start > $load_wr->field_produce_date->value()) $date_start = $load_wr->field_produce_date->value();
              if ($date_end < $load_wr->field_produce_date->value()) $date_end = $load_wr->field_produce_date->value();
            }
          }
        }
        $form_state['data']['source_query'] = [
          'id' => $source_query_wr->getIdentifier(),
          'type' => $source_query_wr->field_query_type->value(),
          'volume' => $source_query_wr->field_qty->value(),
          'date_start' => $date_start,
          'date_end' => $date_end,
          'load' => $load,
        ];
      }
    }

    $form["field_query_type"]["und"]["#default_value"][0] = 'correction';
    drupal_set_title('Заявка на производство');

    if (!empty($form_state['data']['query']['type'])) {
      if ($form_state['data']['query']['type'] == 'correction') {
        drupal_set_title('Корректирующая заявка');
        $form["field_query_type"]["und"]["#default_value"][0] = 'correction';
      }

      if (user_has_role(ROLE_MANAGER)) {
        $form["field_query_status_client"]["und"]["#default_value"][0] = 'processing';
        $form["field_query_status_manager"]["und"]["#default_value"][0] = 'approved';
        $form["field_query_status_manager"]['#access'] = false;
      } else {
        $form["field_query_status_client"]["und"]["#default_value"][0] = 'approved';
        $form["field_query_status_manager"]["und"]["#default_value"][0] = 'processing';
      }
    }

    // если задан исходный Запрос
    // задать дефолтные значения
    if (!empty($form_state['data']['last_query']['volume'])) {
      $form['old_qty'] = [
        '#type' => 'item',
        '#title' => 'Утверждённое количество',
        '#markup' => '<div class ="form-markup">' . number_format($form_state['data']['last_query']['volume'], 0, '', ' ') . '</div>',
        '#wrapper_attributes' => ['class' => ['field-name-old-qty']],
        '#weight' => 2,
      ];
      $form["field_qty"]["und"][0]["value"]["#title"] = 'Новое количество';
      $form["field_qty"]["und"][0]["value"]["#default_value"] = $form_state['data']['last_query']['volume'];
    }

    // Даты
    if (!empty($form_state['data']['month_start'])) {
      $form["field_month"]["und"][0]["#default_value"]["value"] = $form_state['data']['month_start'];
      $form["field_month"]["und"][0]["#default_value"]["value2"] = $form_state['data']['month_start'];
      $form["field_month"]["und"][0]["#value"]["value"] = $form_state['data']['month_start'];
      $form["field_month"]["und"][0]["#value"]["value2"] = $form_state['data']['month_start'];
    }
    if (empty($form_state["data"]["source_query"]["date_start"]) || empty($form_state["data"]["source_query"]["date_end"])) {
      if ($filter && $filter['month'] && $filter['month'] != date('n')) {
        $day_start = gmmktime(0, 0, 0, $filter['month'], 1, $filter['year']);
        $next_month_start = gmmktime(0, 0, 0, date('n', $day_start) + 1, 1, date('Y', $day_start));
      } else {
        $day_start = gmmktime(0, 0, 0, date('n'), date('j')+1, date('Y'));
        $next_month_start = gmmktime(0, 0, 0, date('n', $day_start) + 1, 1, date('Y', $day_start));
      }
      $form["field_query_period"]["und"][0]["#default_value"]["value"] = $day_start;
      $form["field_query_period"]["und"][0]["#default_value"]["value2"] = $next_month_start-24*3600;
    } else {
      $day_start_start = $form_state['data']['source_query']['date_start'];
      $day_end_start = $form_state['data']['source_query']['date_end'];
      $today_start = gmmktime(0, 0, 0, date('n'), date('j'), date('Y'));
      if ($day_start_start <= $today_start) {
        $day_start_start = gmmktime(0, 0, 0, date('n'), date('j')+1, date('Y'));
        if (date('j', $day_end_start) <= date('j')) {
          $day_end_start = gmmktime(0, 0, 0, date('n'), 31, date('Y'));
        }
      }
      $form["field_query_period"]["und"][0]["#default_value"]["value"] = $day_start_start;
      $form["field_query_period"]["und"][0]["#default_value"]["value2"] = $day_end_start;
    }

    if (!empty($form_state['data']['nom_tid'])) {
      $form["field_nomenklatura"]["und"]["#default_value"] = [$form_state['data']['nom_tid']];
    }

  }


  if (in_array($form_id, ['eck__entity__form_add_query_query', 'eck__entity__form_edit_query_query']) && !user_has_role(ROLE_ADMIN)) {
    if (!isset($nomenklatura_from_queries)) $nomenklatura_from_queries = [];
    $produce_units_list = query_get_produce_units_list();

    // обработать кнопку добавления Установки
    if (isset($form_state["triggering_element"]) && $form_state["triggering_element"]["#name"] == 'pu_add' && isset($form_state['values']['pu_select'])) {
      $form_state['data']['produce_units'][$form_state['values']['pu_select']] = [
        'tid' => $form_state['values']['pu_select'],
        'name' => $produce_units_list[$form_state['values']['pu_select']]->name,
        'performance' => null,
      ];
    }

    $form["field_qty"]["#weight"] = 3;
    $form["field_query_period"]["#weight"] = 5;

    if (!user_has_role(ROLE_ADMIN)) {
      $form["field_oc_id"]["#access"] = false;
      $form["field_load"]["#access"] = false;
      $form["field_query_type"]["#access"] = false;
      $form["field_query_status_client"]["#access"] = false;
      $form["field_query_status_manager"]["und"]["#title"] = 'Статус заявки';
      $form["actions"]["submit"]["#value"] = 'Сохранить и отправить';

      if (!empty($form_state['data']['last_query']['id'])) {
        $form["field_nomenklatura"]['#disabled'] = true;
        $form["field_month"]['#disabled'] = true;
      } else {
        $form["field_month"]['#access'] = false;
        $form["field_query_period"]["#weight"] = 0;
      }

      if ($form["field_query_type"]["und"]["#default_value"][0] == 'cancel') {
        $form["field_qty"]['#disabled'] = true;
        $form["actions"]["submit"]["#attributes"]['class'][] = 'btn-danger';
        $form["actions"]["submit"]["#value"] = 'Отменить производство';
      }

      // если Заявка создана клиентом, то менеджеру не показывать причину и необходимость согласования
      if ((!empty($form_state["query"]->is_new) && !user_has_role(ROLE_MANAGER))
        || empty($form_state["query"]->is_new) && !user_has_role(ROLE_MANAGER, user_load($form_state["query"]->uid))) {
        $form["field_query_reason"]["#access"] = false;
        $form["field_query_client_approve"]["#access"] = false;
      }

      // ограничить клиентов
      if (!user_has_role(ROLE_MANAGER, $GLOBALS['user'])) {
        $form["field_query_status_manager"]["#access"] = false;
        $form["field_query_client_approve"]["#access"] = false;
        $form["field_query_client_approve"]["und"]["#default_value"] = 1;
        // для клиента причина - по инициативе заказчика
        $form["field_query_reason"]["#access"] = false;
        $form["field_query_reason"]["und"]["#default_value"] = [553];

        // ограничить Номенклатуру текущим юзером
        $query = new EntityFieldQuery();
        $result = $query
          ->entityCondition('entity_type', 'taxonomy_term')
          ->propertyCondition('vid', taxonomy_vocabulary_machine_name_load('nomenklatura')->vid)
          ->fieldCondition('field_user', 'target_id', $GLOBALS['user']->uid)
          ->execute();
        if ($result) {
          $nomenklatura_all = entity_load('taxonomy_term', array_keys($result['taxonomy_term']));

          $options = [];
          foreach ($nomenklatura_all as $nomenklatura_term) {
            if (!empty($form["field_nomenklatura"]["und"]["#options"][$nomenklatura_term->tid])
              && strpos($form["field_nomenklatura"]["und"]["#options"][$nomenklatura_term->tid], '_') !== 0) {

              // при добавлении новой Заявки исключить Номенклатуру, по которой есть Заявки
              if (empty($form_state['data']['last_query']) && in_array($nomenklatura_term->tid, $nomenklatura_from_queries)) continue;
              // у клиентов своё наименование
              $name_arr = [];
              if (!empty($nomenklatura_term->field_oc_artikul_davalec["und"][0]["value"])) {
                $name_arr[] = $nomenklatura_term->field_oc_artikul_davalec["und"][0]["value"];
              }
              $name_arr[] = !empty($nomenklatura_term->field_oc_name_davalec["und"][0]["value"]) ? $nomenklatura_term->field_oc_name_davalec["und"][0]["value"] : $form["field_nomenklatura"]["und"]["#options"][$nomenklatura_term->tid];
              $options[$nomenklatura_term->tid] = implode(' ', $name_arr);
            }
          }
          if ($options) {
            $form["field_nomenklatura"]["und"]["#options"] = $options;
            if (!$form["field_nomenklatura"]["und"]["#default_value"] || empty($options[current($form["field_nomenklatura"]["und"]["#default_value"])])) {
              $form["field_nomenklatura"]["und"]["#default_value"] = [array_key_first($options)];
            }
          }
        }
      } else {
        // убрать для менеджера причины Клиента
        unset($form["field_query_reason"]["und"]["#options"][553]);
      }
    }

    $form['#attributes']['class'] = ['query-form'];

    if (empty($form_state['data'])) $form_state['data'] = [];

    if (empty($form_state["query"]->is_new)) {
      $query_wr = entity_metadata_wrapper('query', $form_state["query"]);
      $form_state['data']['query']['id'] = $query_wr->getIdentifier();
      $form_state['data']['query']['volume'] = $query_wr->field_qty->value();
    }

    $month_start = empty($form_state['data']['month_start']) ? 0 : $form_state['data']['month_start'];

    // текущую Загрузку извлекаем:
    // - для новой Заявки из предыдущей Заявки с заданной Загрузкой (если есть)
    // - для редактируемой - из неё самой
    $load_query_id = null;
    if (!empty($form_state['data']['query']['id'])) {
      $load_query_id = $form_state['data']['query']['id'];
    } elseif(!empty($form_state['data']['source_query']['id'])) {
      $load_query_id = $form_state['data']['source_query']['id'];
    }
    if ($load_query_id) {
      $load_query_wr = entity_metadata_wrapper('query', $load_query_id);
      if ($load_query_id && $load_query_wr->value()) {
        $nom_tid = null;
        if ($load_query_wr->field_nomenklatura->value()) {
          $nom_tid = $load_query_wr->field_nomenklatura->tid->value();
        } else {
          $nom_tid = empty($form["field_nomenklatura"]["und"]["#default_value"][0]) ? array_key_first($form["field_nomenklatura"]["und"]["#options"]) : $form["field_nomenklatura"]["und"]["#default_value"][0];
        }

        if ($form["field_query_type"]["und"]["#default_value"][0] != 'cancel') {
          if ($nom_tid) {
            // получить Установки, уже выбранные в данной форме
            $produce_units = empty($form_state['data']['produce_units']) ? [] : $form_state['data']['produce_units'];

            // получить Установки и их Загрузку из Запроса
            $load_produce_units = query_get_produce_units_from_query($load_query_wr->value());
            foreach($load_produce_units as $pu_tid => $pu_item) {
              if (empty($produce_units[$pu_tid])) $produce_units[$pu_tid] = $pu_item;
            }

            $form_state['data']['produce_units'] = $produce_units;
          }
        }
      }
    }


    // добавить в форму установки ------------------------------------------------------------------------------------
    $produce_units = empty($form_state['data']['produce_units']) ? [] : $form_state['data']['produce_units'];

    if ($produce_units) {
      $form['produce_units'] = [
        '#type' => 'container',
        '#attributes' => [
          'id' => ['produce-units-wrapper'],
          'class' => ['produce-units-wrapper'],
        ],
        '#weight' => 6,
      ];

      foreach ($produce_units as $pu_tid => $produce_unit) {
        $produce_unit_load = query_get_produce_unit_load($pu_tid, $month_start, null, $load_query_id);

        $form['produce_units']['pu_' . $pu_tid] = [
          '#type' => 'container',
          '#attributes' => ['class' => ['produce-unit']],
          '#weight' => 3,
        ];
        $form['produce_units']['pu_' . $pu_tid]['name'] = [
          '#type' => 'item',
          '#title' => 'Установка',
          '#markup' => '<h3>' . $produce_unit['name'] . '</h3>',
          '#wrapper_attributes' => ['class' => ['produce-unit-name']],
        ];

        $form['produce_units']['pu_' . $pu_tid]['selection'] = [
          '#type' => 'container',
          '#attributes' => ['class' => ['produce-unit-dates', 'form-item']],
        ];
        $form['produce_units']['pu_' . $pu_tid]['selection']['title'] = [
          '#markup' => '<label class="control-label">Даты</label>',
        ];

        $form['produce_units']['pu_' . $pu_tid]['selection']['dates'] = [
          '#type' => 'container',
          '#attributes' => ['class' => ['form-checkboxes']],
          '#suffix' => '<div class="produce-unit-legenda"><span></span>- установка свободна <span class="unavailable"></span>- установка недоступна <span class="loaded"></span>- установка занята <span class="selected"></span>- выбранные даты</div>',
        ];

        // цикл по количеству дней в месяце
        for ($i = 1; $i <= date("t", $month_start); $i++) {

//          $day_start = gmmktime(0, 0, 0, date('n'), date('j'), date('Y'));
          $day_start = $month_start + ($i - 1) * 60 * 60 * 24;

          // для текущей Номенклатуры занятость не выводим (в случае заполнения корректирующей Заявки)
//                  $produce_unit_is_busy = !empty($produce_unit_load[$day_start]) && $produce_unit_load[$day_start]['nomenklatura']['tid'] != $nom_tid;
//                  $produce_unit_has_current_load = (int)!empty($current_load[$pu_tid][$day_start]);
          $produce_unit_is_busy = !empty($produce_unit_load[$day_start]['is_busy']);
          $produce_unit_has_current_load = (int)!empty($produce_unit_load[$day_start]['is_current_load']);
          $produce_unit_is_unavailable = (int)!empty($produce_unit_load[$day_start]['is_unavailable']);
          $classes = empty($produce_unit_load[$day_start]['classes']) ? [] : $produce_unit_load[$day_start]['classes'];
          // дата недоступна для выбора в корректирующей Заявке для Клиента до сегодня и ещё спустя три дня
//                  $produce_unit_is_unavailable = !user_has_role(ROLE_ADMIN)
//                    && !user_has_role(ROLE_MANAGER)
//                    && ($day_start < $today_start + 3 * 24 * 60 * 60)
//                    && in_array($load_query_wr->field_query_type->value(), ['main', 'correction']); // данные могут быть получены из начальной и корректирующей

          // вывести подсказку при наведении с выходом продукции в этот день
//                  $classes = [];
//                  if ($produce_unit_is_busy && !$produce_unit_has_current_load) $classes[] = 'loaded';
//                  if ($produce_unit_has_current_load) $classes[] = 'selected';
//                  if ($produce_unit_is_unavailable && !$produce_unit_has_current_load) $classes[] = 'unavailable';
          $tooltip = empty($produce_unit_load[$day_start]['is_current_load']) ? '' : ' data-toggle="tooltip" data-placement="top" title="' . $produce_unit_load[$day_start]['output'] . '"';

          // при создании заявки даты можно выбирать, при редактировании нет
          if (!empty($form_state['query']->is_new) && user_has_role(ROLE_MANAGER)) {
            $form['produce_units']['pu_' . $pu_tid]['selection']['dates']['check_' . $pu_tid . '_' . $i] = [
              '#type' => 'checkbox',
              '#title' => '<span>' . $i . '</span>',
              '#disabled' => ($produce_unit_is_busy && !$produce_unit_has_current_load) || ($produce_unit_is_unavailable && !user_has_role(ROLE_MANAGER)),
              '#default_value' => $produce_unit_has_current_load,
              '#attributes' => ['class' => $classes],
            ];
            if ($tooltip) {
              $form['produce_units']['pu_' . $pu_tid]['selection']['dates']['check_' . $pu_tid . '_' . $i]['#wrapper_attributes'] = [
                'data-toggle' => 'tooltip',
                'data-placement' => 'top',
                'title' => empty($produce_unit_load[$day_start]['is_current_load']) ? '' : $produce_unit_load[$day_start]['output'],
              ];
            }
          } else {
            $form['produce_units']['pu_' . $pu_tid]['selection']['dates']['check_' . $pu_tid . '_' . $i]['#markup'] = '<span class="c-box ' . implode(' ', $classes) . '"' . $tooltip . '>' . $i . '</span>';
          }
        }

        // производительность
        $form['produce_units']['pu_' . $pu_tid]['performance_' . $pu_tid] = [
          '#type' => 'textfield',
          '#title' => 'Производительность',
          '#required' => true,
          '#access' => user_has_role(ROLE_MANAGER),
          '#default_value' => empty($produce_unit['performance']) ? 0 : $produce_unit['performance'],
          '#wrapper_attributes' => ['class' => ['produce-unit-performance']],
        ];

      }
    }

    $form["field_comment"]["und"][0]["value"]["#required"] = !user_has_role(ROLE_MANAGER);

    $form["#validate"][] = 'query_form_eck__entity__form_query_query_validate';
    $form["#submit"][] = 'query_form_eck__entity__form_query_query_submit';
    $form["actions"]["submit"]["#name"] = 'eck_submit';
  }

  // дополнительный обработчик сабмита
  if (in_array($form_id, ['eck__entity__form_add_query_query', 'eck__entity__form_edit_query_query', 'eck__entity__delete_form'])) {
    $form["#submit"][] = 'query_form_redirect_submit';
  }
}

function query_form_produce_unit_add_ajax_callback($form, &$form_state)
{
  return $form;
}

/**
 * query_form_eck__entity__form validate callback
 */
function query_form_eck__entity__form_query_query_validate(&$form, &$form_state)
{
  if ($form_state["triggering_element"]["#name"] == 'eck_submit') {
    // обычно месяц задан и не доступен для смены
    if (empty($form_state['data']['month_start'])) {
      $month_value = $form_state["values"]["field_query_period"]["und"][0]["value"];
    } else {
      $month_value = $form_state['data']['month_start'];
    }
    $month_start = gmmktime(0, 0, 0, date('n', $month_value), 1, date('Y', $month_value));
    $form_state["values"]["field_month"]["und"][0]["value"] = $month_start;
    $form_state["values"]["field_month"]["und"][0]["value2"] = $month_start;

    // проконтролировать, что период задан в рамках текущего месяца и не ранее сегодня
    if (!user_has_role(ROLE_MANAGER) && !user_has_role(ROLE_ADMIN)) {
      $next_day_start = gmmktime(0, 0, 0, date('n'), date('j')+1, date('Y'));
      $period_start = $form_state["values"]["field_query_period"]["und"][0]["value"];
      $period_end = $form_state["values"]["field_query_period"]["und"][0]["value2"];
      $next_month_period_start = gmmktime(0, 0, 0, date('n', $period_start) + 1, 1, date('Y', $period_start));
      if ($period_start < $next_day_start) {
        form_set_error('field_query_period', 'Дата не может быть задана ранее, чем завтра.');
        return false;
      }
      if ($period_end >= $next_month_period_start) {
        form_set_error('field_query_period', 'Конечная дата выходит за рамки одного месяца.');
        return false;
      }
    }

    // Номенклатура Пользователя из Заявок текущего Месяца
    // чтобы исколючить выбор Номенклатуры по которой есть Заявки
    if (empty($form_state["data"]["nom_tid"]) && !empty($form_state['data']['davalec_uid'])) {
      $dbr = db_select('eck_query', 'q');
      $dbr->addField('q', 'id');
      $dbr->innerJoin('field_data_field_nomenklatura', 'fn', 'fn.entity_id = q.id');
      $dbr->condition('fn.field_nomenklatura_target_id', $form_state["values"]["field_nomenklatura"]["und"][0]["target_id"]);
      $dbr->innerJoin('field_data_field_month', 'fm', 'fm.entity_id = q.id');
      $dbr->condition('fm.field_month_value', $month_start);
      if ($dbr->execute()->fetchCol()) {
        form_set_error('field_nomenklatura', 'По данному наименованию уже есть заявки на заданный месяц. Для внесения правок воспользуйтесь кнопкой "Создать корректировку".');
        return false;
      }
    }

    // если заданы даты для Установки, сохранить их и проверить наличие Производительности
    if (isset($form_state["data"]["produce_units"])) {
      $volume = $form_state["values"]["field_qty"]["und"][0]["value"];
      foreach ($form_state["data"]["produce_units"] as $produce_unit_tid => $produce_unit) {
        $load = [];
        $performance = $form_state['values']['performance_' . $produce_unit_tid] ? $form_state['values']['performance_' . $produce_unit_tid] : 0;
        $form_state["data"]["produce_units"][$produce_unit_tid]['performance'] = $performance;
        if (!$performance) {
          form_set_error('performance_' . $produce_unit_tid, 'Не задана производительность установки');
          return false;
        }
        $today_start = gmmktime(0, 0, 0, date('n'), date('j'), date('Y'));

        // посчитать уже произведённое количество
        $output_produced = 0;
        if (!empty($form_state['data']['source_query']['load'])) {
          foreach ($form_state['data']['source_query']['load'] as $load_date => $load_output) {
            if ($load_date <= $today_start) {
              $output_produced += $load_output;
            }
          }
        }
        if ($volume < $output_produced) {
          form_set_error('field_qty', 'Заданное количество меньше уже произведённого.');
          return false;
        }

        // Сформировать Загрузку для выбранной установки.
        // Загрузку с выходом 0 (когда дат задано больше чем хватает Количества) тоже сохраняем,
        // нужна для сравнения старой и заданной Загрузок.
        // Исключим загрузку с 0 на этапе сохранения.
        // Сохранить размеры значений выхода продукции в уже произведённой Загрузке.
        $output_total = 0;
        foreach ($form_state['values'] as $key => $value) {
          if (strpos($key, 'check_' . $produce_unit_tid) === 0 && $value === 1) {
            $day = str_replace('check_' . $produce_unit_tid . '_', '', $key);
            $day_start = $month_start + ($day - 1) * 60 * 60 * 24;
            // вычислить выход на день (Производительность или Остаток)
            // если Загрузка этого дня уже произведена, взять выход из неё (в последнем дне может быть меньше)
            if ($day_start <= $today_start                                                            // в день Заявки Загрузка считается произведённой
              && !empty($form_state['data']['source_query']['load'][$day_start])) {
              $output = $form_state['data']['source_query']['load'][$day_start];
            } else {
              $output = $volume - $output_total >= $performance ? $performance : $volume - $output_total;
            }
            if ($output < 0) $output = 0;
            $output_total += $output;

            $load[] = [
              'field_produce_unit' => $produce_unit_tid,
              'field_produce_date' => $day_start,
              'field_produce_output' => $output,
            ];
          }
        }
        $form_state["data"]["produce_units"][$produce_unit_tid]['load'] = $load;

//        if ($output_total < $volume) {
//          form_set_error('field_qty', 'Выбрано дат меньше, чем необходимо для заданного количества производимого продукта.');
//          return false;
//        }
      }

      // если количество дней в Загрузке изменилось, а Кол-во нет - вывести ошибку
//      if (!empty($form_state['data']['source_query']['load'])) {
//        $load_old = $form_state['data']['source_query']['load'];
//        $volume_old = $form_state['data']['source_query']['volume'];
//        if ($volume == $volume_old
//          && count($load) > count($load_old)) {
//          form_set_error('field_qty', 'При выборе дополнительных дат производства необходимо увеличить количество продукта.');
//          return false;
//        }
//      }
    }
  }
}

/**
 * query_form_eck__entity__form submi callback
 */
function query_form_eck__entity__form_query_query_submit(&$form, &$form_state)
{
  // сохранить Загрузку
  if (!empty($form_state["values"]["entity"]->id) && !empty($form_state["data"]["produce_units"])) {
    foreach($form_state["data"]["produce_units"] as $puid => $produce_unit) {
      if (!empty($produce_unit['load'])) {
        query_query_load_update($form_state["values"]["entity"]->id, $produce_unit['load']);
      }
    }
  }

  // статус старой Заявки изменить на Отказано
  if (!empty($form_state["data"]["last_query"]['id'])) {
    $last_query_wr = entity_metadata_wrapper('query', $form_state['data']['last_query']['id']);
    if ($last_query_wr->field_query_status_manager->value() == 'processing') {
      $last_query_wr->field_query_status_manager = 'deny';
      $last_query_wr->save();
    }
  }

  $query_wr = entity_metadata_wrapper('query', $form_state["values"]["entity"]->id);

  // экспорт новой заявки
  query_query_export($query_wr);

  // отправить email менеджерам
  $params = [
    'qid' => $query_wr->getIdentifier(),
    'month' => date('F', $query_wr->field_month->value()),
    'product' => $query_wr->field_nomenklatura->name->value(),
    'product_owner_account' => $query_wr->field_nomenklatura->field_user->value(),
    'status_client' => $query_wr->field_query_status_client->label(),
    'status_manager' => $query_wr->field_query_status_manager->label(),
    'client_approve' => $query_wr->field_query_client_approve->value(),
    'type' => $query_wr->field_query_type->value(),
    'comment' => $query_wr->field_comment->value(),
  ];
  if ($query_wr->field_query_reason->value()) {
    $params['reason'] = $query_wr->field_query_reason->name->value();
  }

  if ($managers = query_get_managers_to_notify()) {
    foreach ($managers as $manager) {
      drupal_mail('mailer', 'manager_notify_query_correction_new', $manager->mail, user_preferred_language($manager), $params);
    }
  }
}

function query_form_redirect_submit(&$form, &$form_state)
{
  if (!user_has_role(ROLE_ADMIN)) {
    $form_state['redirect'] = user_has_role(ROLE_MANAGER) ? 'manage' : 'queries';
  }
}


function query_query_export($query_wr)
{
  $query_arr = [
    'id' => $query_wr->getIdentifier(),
    'id_1c' => '',
    'created' => date('d.m.Y H:i:s', $query_wr->created->value()),
    'month' => date('d.m.Y', $query_wr->field_month->value()),
    'artikul_1c' => $query_wr->field_nomenklatura->field_oc_artikul->value(),
    'volume' => $query_wr->field_qty->value(),
    'status_manager' => $query_wr->field_query_status_manager->value(),
    'period_begin' => date('d.m.Y', $query_wr->field_query_period->value->value()),
    'period_end' => date('d.m.Y', $query_wr->field_query_period->value2->value()),
    'comment' => $query_wr->field_comment->value(),
    'load' => [],
    'action' => '',
  ];
  if ($query_wr->field_query_reason->value()) {
    $params['reason_1с'] = 'нужен словарь';
  }

  $query_json = drupal_json_encode($query_arr);
  $filename = 'query_export_' . $query_arr['id'] . '.json';
  $directory = 'private://exchange/';
  file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
  file_unmanaged_save_data($query_json, $directory . $filename, $replace = FILE_EXISTS_RENAME);
}

/**
 * импорт Заявки
 */
function query_query_import($array)
{
  $query = null;
  $old_query_id = empty($array['ID']) ? 0 : $array['ID'];
  $query_oc_id = empty($array["ID_1c"]) ? '' : $array["ID_1c"];
  $month_value = empty($array['month']) ? '' : $array['month'];
  if (!$month_value) {
    watchdog('import', 'Пустое поле меcяца в файле экспорта. (' . $query_oc_id . ')', [], WATCHDOG_ERROR);
    return false;
  }
  $artikul = empty($array['artikul_1c']) ? '' : $array['artikul_1c'];
  $nom = query_get_nomenklatura_by_artikul($artikul);
  if (!$nom) {
    watchdog('import', 'Не найдена номенклатура по артикулу "' . $artikul . '". (' . $query_oc_id . ')', [], WATCHDOG_ERROR);
    return false;
  }

//  $query_type = empty($query_arr['type']) ? '' : $query_arr['type'];
//  if (!in_array($query_type, ['main', 'correction'])) {
//    watchdog('import', 'Не найден тип заявки "' . $query_type . '". (' . $query_oc_id . ')', [], WATCHDOG_ERROR);
//    return false;
//  }
//  $query_status_client = empty($query_arr['status_client']) ? '' : $query_arr['status_client'];
//  if (!in_array($query_status_client, ['processing', 'approved', 'deny'])) {
//    watchdog('import', 'Не найден статус клиента "' . $query_status_client . '". (' . $query_oc_id . ')', [], WATCHDOG_ERROR);
//    return false;
//  }
  $query_status_manager = empty($array['status_manager']) ? '' : $array['status_manager'];
  if (!in_array($query_status_manager, ['processing', 'approved', 'deny'])) {
    watchdog('import', 'Не найден статус менеджера "' . $query_status_manager . '". (' . $query_oc_id . ')', [], WATCHDOG_ERROR);
    return false;
  }

  // получить Загрузку
  $load_arr = [];
  $query_qty = 0;
  if (!empty($array['load'])) {
    foreach($array['load'] as $item) {
      if ($produce_unit = query_get_produce_unit_by_1cID($item['unit_id_1c'])) {
        $date_arr = explode('.', $item['date']);
        $day_start = gmmktime(0, 0, 0, $date_arr[1], $date_arr[0], $date_arr[2]);
        $load_arr[] = [
          'field_produce_unit' => $produce_unit->tid,
          'field_produce_date' => $day_start,
          'field_produce_output' => $item['output'],
        ];
        $query_qty += $item['output'];
      } else {
        watchdog('import', 'Импорт заявки. Не найдена установка "' . $item['unit_id_1c'] . '". (' . $query_oc_id . ')', [],WATCHDOG_ERROR);
        return false;
      }
    }
  }

  // в Отказе должно быть количество, так как Загрузка отсутствует
  if (!$query_qty && $query_status_manager == 'deny' && !empty($array['volume'])) {
    $query_qty = $array['volume'];
  }

  // проверить наличие исходной Заявки по id и сменить статус менеджера
  if ($old_query_id) {
    try {
      $old_query_wr = entity_metadata_wrapper('query', $old_query_id);
      if ($old_query_wr->value()) {
        // проверить, совпадает ли артикул из новой заявки со старой (просили одинэсники)
        $old_artikul_1c = $old_query_wr->field_nomenklatura->field_oc_artikul->value();
        if ($old_artikul_1c != $artikul) {
          watchdog('import', 'Артикул из старой Заявки: ' . $old_artikul_1c . ' не совпадает с артикулом из ответа: ' . $artikul . '. (' . $query_oc_id . ')', [],WATCHDOG_ERROR);
          return false;
        }
        // может быть approved или deny
        $old_query_wr->field_query_status_manager = $query_status_manager;
        $old_query_wr->save();
      }
    } catch (Exception $e) {}
  }

  // найти заявку по ID_1c, если передан
  $date_arr = explode('.', $month_value);
  $month_start = gmmktime(0, 0, 0, $date_arr[1], 1, $date_arr[2]);
  if ($query_oc_id && $month_start) {
    $query = query_get_query_by_oc_id($query_oc_id, $month_start);
  }

  // если нет Заявки, создать
  if (!$query) {
    $query = entity_create('query', [
      'type' => 'query',
      'created' => REQUEST_TIME,
      'uid' => 0,
    ]);
    entity_save('query', $query);
  }

  // подготовить поля
  $query_comment = empty($array['comment']) ? '' : $array['comment'];
  $query_period_value = empty($array['period_begin']) ? 0 : strtotime($array['period_begin']);
  $query_period_value2 = empty($array['period_end']) ? 0 : strtotime($array['period_end']);

  $query_reason_tid = 0;
  $query_reason_1c = empty($array['reason_1с']) ? '' : $array['reason_1с'];
  if ($query_reason_1c && $query_reason = query_get_reason_by_oc_id($query_reason_1c)) {
    $query_reason_tid = $query_reason->tid;
  }

  // есть ли утверждённый план
  $efquery = new EntityFieldQuery();
  $has_approved_plan = $efquery
    ->entityCondition('entity_type', 'query')
    ->fieldCondition('field_month', 'value', $month_start)
    ->fieldCondition('field_query_type', 'value', 'main')
    ->fieldCondition('field_query_status_client', 'value', 'approved')
    ->fieldCondition('field_query_status_manager', 'value', 'approved')
    ->execute();

  // заполнить поля
  try {
    $query_wr = entity_metadata_wrapper('query', $query);
    $query_wr->created = REQUEST_TIME;
    $query_wr->field_month = $month_start;
    $query_wr->field_nomenklatura = $nom->tid;
    $query_wr->field_query_type = 'correction';
    $query_wr->field_qty = $query_qty;
    $query_wr->field_query_status_client = $has_approved_plan ? 'approved' : 'processing';
    $query_wr->field_query_status_manager = $query_status_manager;
    if ($query_reason_tid) $query_wr->field_query_reason = $query_reason_tid;
    $query_wr->field_comment = $query_comment;
    $query_wr->field_oc_id = $query_oc_id;
    $query_wr->field_query_period = ['value' => $query_period_value, 'value2' => $query_period_value2 ];
    $query_wr->save();
    // Загрузка импортируется только для Заявок, пришедших после утверждения плана
    // в Заявках до утверждения берём только переписку, так как Загрузка отображается в предварительном плане
    if ($load_arr && $has_approved_plan) {
      query_query_load_update($query->id, $load_arr);
    }

  } catch (Exception $e) {
    watchdog('import', 'Ошибка при сохранении заявки. ' . $e->getMessage(), [],WATCHDOG_ERROR);
    return false;
  }

  // если пришёл отказ, сделать копию последней актуальной заявки (созданной до отказа)
  // тк актуальная заявка должна быть всегда сверху
  if ($query_status_manager == 'deny') {
    $efquery = new EntityFieldQuery();
    $efquery
      ->entityCondition('entity_type', 'query')
      ->propertyCondition('created', $query_wr->created->value(), '<')
      ->fieldCondition('field_month', 'value', $month_start)
      ->fieldCondition('field_nomenklatura', 'target_id', $nom->tid)
      ->fieldCondition('field_query_status_client', 'value', 'approved')
      ->fieldCondition('field_query_status_manager', 'value', 'approved')
      ->propertyOrderBy('id', 'DESC');
    $result = $efquery->execute();
    if ($result) {
      query_query_make_copy(current($result['query']));
    }
  }

  // если пришла Занятость
  if (!empty($array['service'])) {
    $zan_load_arr = [];
    foreach($array['service'] as $item) {
      if ($produce_unit = query_get_produce_unit_by_1cID($item['unit_id_1c'])) {
        $date_arr = explode('.', $item['date']);
        $day_start = gmmktime(0, 0, 0, $date_arr[1], $date_arr[0], $date_arr[2]);
        $zan_load_arr[] = [
          'field_produce_unit' => $produce_unit->tid,
          'field_produce_date' => $day_start,
          'field_produce_output' => 0,
        ];
      } else {
        watchdog('import', 'Импорт занятости. Не найдена установка "' . $item['unit_id_1c'] . '". (' . $query_oc_id . ')', [],WATCHDOG_ERROR);
        //return false;
      }
    }

    if ($zan_load_arr) {
      $query_zan = entity_create('query', [
        'type' => 'query',
        'created' => REQUEST_TIME,
        'uid' => 0,
      ]);
      entity_save('query', $query_zan);

      $query_zan_wr = entity_metadata_wrapper('query', $query_zan);
      $query_zan_wr->field_month = $month_start;
      $query_zan_wr->field_nomenklatura = 583; // tid Технических работ
      $query_zan_wr->field_query_type = 'service';
      $query_zan_wr->save();

      query_query_load_update($query_zan->id, $zan_load_arr);
    }
  }

  // уведомить клиента о новой заявке
  $params = [
    'qid' => $query_wr->getIdentifier(),
    'month' => date('F', $query_wr->field_month->value()),
    'product' => $query_wr->field_nomenklatura->name->value(),
    'product_owner_account' => $query_wr->field_nomenklatura->field_user->value(),
    'status_client' => $query_wr->field_query_status_client->label(),
    'status_manager' => $query_wr->field_query_status_manager->label(),
    'client_approve' => $query_wr->field_query_client_approve->value(),
    'type' => $query_wr->field_query_type->value(),
    'comment' => $query_wr->field_comment->value(),
  ];
  if ($query_wr->field_query_reason->value()) {
    $params['reason'] = $query_wr->field_query_reason->name->value();
  }
  drupal_mail('mailer', 'client_notify_query_correction_new', $params['product_owner_account']->mail, user_preferred_language($params['product_owner_account']), $params);

  return true;
}

function query_query_make_copy($source_query)
{
  $query_new = entity_create('query', [
    'type' => 'query',
    'created' => REQUEST_TIME,
    'uid' => 0,
  ]);
  entity_save('query', $query_new);

  $source_query_wr = entity_metadata_wrapper('query', $source_query->id);

  $query_new_wr = entity_metadata_wrapper('query', $query_new);
  $query_new_wr->field_month = $source_query_wr->field_month->value();
  $query_new_wr->field_nomenklatura = $source_query_wr->field_nomenklatura->value();
  $query_new_wr->field_query_type = 'correction';
  $query_new_wr->field_query_status_client = 'approved';
  $query_new_wr->field_query_status_manager = 'approved';
  $query_new_wr->field_qty = $source_query_wr->field_qty->value();
  $query_new_wr->field_query_reason = $source_query_wr->field_query_reason->value();
  $query_new_wr->field_comment = $source_query_wr->field_comment->value();
  $query_new_wr->field_oc_id = $source_query_wr->field_oc_id->value();
  $query_new_wr->field_query_period = ['value' => $source_query_wr->field_query_period->value->value(), 'value2' => $source_query_wr->field_query_period->value2->value()];
  $query_new_wr->save();

  // Загрузка
  foreach ($source_query_wr->field_load->getIterator() as $source_load_wr) {
    if ($source_load_wr->value()) {
      $load = entity_create('load', ['type' => 'load']);
      entity_save('load', $load);
      $load_wr = entity_metadata_wrapper('load', $load);
      $load_wr->field_produce_unit = $source_load_wr->field_produce_unit->value();
      $load_wr->field_produce_date = $source_load_wr->field_produce_date->value();
      $load_wr->field_produce_output = $source_load_wr->field_produce_output->value();
      $load_wr->save();
      $query_new_wr->field_load[] = $load_wr->getIdentifier();
    }
  }
  $query_new_wr->save();
}

function query_get_query_by_oc_id($oc_id, $month_start)
{
  $efquery = new EntityFieldQuery();
  $result = $efquery
    ->entityCondition('entity_type', 'query')
    ->fieldCondition('field_oc_id', 'value', $oc_id)
    ->fieldCondition('field_month', 'value', $month_start)
    ->execute();
  if ($result) {
    $entities = entity_load('query', [current($result['query'])->id]);
  }
  return empty($entities) ? false: current($entities);
}

function query_get_reason_by_oc_id($oc_id)
{
  $r_vid = taxonomy_vocabulary_machine_name_load('reasons')->vid;
  $query = new EntityFieldQuery();
  $terms = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $r_vid)
    ->fieldCondition('field_reason_oc_id', 'value', $oc_id)
    ->execute();
  if ($terms) {
    $entities = entity_load('taxonomy_term', [current($terms['taxonomy_term'])->tid]);
  }
  return empty($entities) ? false: current($entities);
}

function query_get_managers_to_notify()
{
  $dbr = db_select('users', 'u');
  $dbr->innerJoin('users_roles', 'ur', 'ur.uid = u.uid');
  $dbr->condition('ur.rid', ROLE_MANAGER);
  $dbr->innerJoin('field_data_field_notify_query', 'nq', 'nq.entity_id = u.uid');
  $dbr->condition('nq.field_notify_query_value', 1);
  $dbr->addField('u', 'uid');
  return ($result = $dbr->execute()->fetchCol()) ? user_load_multiple($result, []) : false;
}

/**
 * Implements hook_views_api().
 */
function query_views_api()
{
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'query') . '/views',
  );
}

/**
 * Implements hook_views_data_alter().
 */
function query_views_data_alter(&$data)
{
  $data['eck_query']['produce_units_form'] = array(
    'field' => array(
      'title' => t('Produce units'),
      'help' => t('View and select produce units.'),
      'handler' => 'query_handler_field_produce_units_form',
    ),
  );
  $data['eck_query']['actions'] = array(
    'field' => array(
      'title' => t('Actions'),
      'help' => t('Conditional actions'),
      'handler' => 'query_handler_field_actions',
    ),
  );
  $data['eck_query']['comment'] = array(
    'field' => array(
      'title' => t('Formatted Comment'),
      'handler' => 'query_handler_field_comment',
    ),
  );
  $data['taxonomy_term_data']['produce_unit_load'] = array(
    'field' => array(
      'title' => t('Produce Unit Load'),
      'help' => t('Produce Unit Load'),
      'handler' => 'query_handler_field_produce_unit_load',
    ),
  );
  $data['taxonomy_term_data']['produce_unit_load_amount'] = array(
    'field' => array(
      'title' => t('Produce Unit Load Amount'),
      'help' => t('Produce unit load amount by nomenklstura'),
      'handler' => 'query_handler_field_produce_unit_load_amount',
    ),
  );
}

/**
 * Implements hook_views_pre_render().
 */
function query_views_pre_render(&$view)
{
  if ($view->name == 'queries' && $view->current_display == 'page_1') {
    // добавить кнопку Новая заявка
    $view->attachment_before = (empty($view->attachment_before) ? '' : $view->attachment_before) . '<a href="/admin/structure/entity-type/query/query/add" class="btn btn-primary">Новая заявка</a>';
  }
}

/**
 * hook_preprocess_views_view_unformatted()
 */
function query_preprocess_views_view_unformatted(&$vars)
{
  // добавить класс строке основного Запроса, если есть корректирующий
  if (in_array($vars['view']->name, ['queries', 'manager_queries']) && $vars['view']->current_display == 'page_1') {
    foreach ($vars["classes"] as $key => $value) {
      $query_status_manager = $vars["view"]->result[$key]->field_field_query_status_manager[0]["raw"]["value"];
      $query_status_client = $vars["view"]->result[$key]->field_field_query_status_client[0]["raw"]["value"];
      $query_author_id = empty($vars["view"]->result[$key]->eck_query_uid) ? 0 : $vars["view"]->result[$key]->eck_query_uid;
      $query_month_start = $vars["view"]->result[$key]->field_field_month[0]["raw"]["value"];
      $query_created = $vars["view"]->result[$key]->eck_query_created;
      $query_nom_tid = $vars["view"]->result[$key]->field_field_nomenklatura[0]["raw"]["target_id"];
      $query_type = $vars["view"]->result[$key]->field_field_query_type[0]["raw"]["value"];
      $query_id = $vars["view"]->result[$key]->eck_query_id;

      // есть ли утверждённый план
      $efquery = new EntityFieldQuery();
      $has_approved_plan = $efquery
        ->entityCondition('entity_type', 'query')
        ->fieldCondition('field_month', 'value', $query_month_start)
        ->fieldCondition('field_query_type', 'value', 'main')
        ->fieldCondition('field_query_status_client', 'value', 'approved')
        ->fieldCondition('field_query_status_manager', 'value', 'approved')
        ->execute();

      // есть ли любой план по номенклатуре после заявки
      $efquery = new EntityFieldQuery();
      $has_plan_after = $efquery
        ->entityCondition('entity_type', 'query')
        ->propertyCondition('created', $query_created, '>')
        ->fieldCondition('field_month', 'value', $query_month_start)
        ->fieldCondition('field_nomenklatura', 'target_id', $query_nom_tid)
        ->fieldCondition('field_query_type', 'value', 'main')
        ->execute();

      // есть ли утверждённый план после
      $efquery = new EntityFieldQuery();
      $has_approved_plan_after = $efquery
        ->entityCondition('entity_type', 'query')
        ->propertyCondition('created', $query_created, '>')
        ->fieldCondition('field_month', 'value', $query_month_start)
        ->fieldCondition('field_nomenklatura', 'target_id', $query_nom_tid)
        ->fieldCondition('field_query_type', 'value', 'main')
        ->fieldCondition('field_query_status_client', 'value', 'approved')
        ->fieldCondition('field_query_status_manager', 'value', 'approved')
        ->execute();

      // есть ли Заявки от пользователя после
      $efquery = new EntityFieldQuery();
      $has_client_query = $efquery
        ->entityCondition('entity_type', 'query')
        ->propertyCondition('id', $query_id, '>')
        ->propertyCondition('created', $query_created, '>=')
        ->propertyCondition('uid', $GLOBALS['user']->uid)
        ->fieldCondition('field_month', 'value', $query_month_start)
        ->fieldCondition('field_nomenklatura', 'target_id', $query_nom_tid)
        ->execute();

      // есть ли актуальные Корректировки после
      $efquery = new EntityFieldQuery();
      $actual_queries = $efquery
        ->entityCondition('entity_type', 'query')
        ->propertyCondition('id', $query_id, '>')
        ->propertyCondition('created', $query_created, '>=')
        ->fieldCondition('field_month', 'value', $query_month_start)
        ->fieldCondition('field_nomenklatura', 'target_id', $query_nom_tid)
        ->fieldCondition('field_query_status_client', 'value', 'approved')
        ->fieldCondition('field_query_status_manager', 'value', 'processing', '!=')
        ->execute();
      if (!$has_approved_plan_after) {
        if ($has_approved_plan) {
          if (($has_client_query && $actual_queries) || ($actual_queries && count($actual_queries['query']) > 1)) {
            $vars["classes_array"][$key] .= ' stamp-archive';
          } else {
            if ($actual_queries) {

              if ($query_author_id) {
                $vars["classes_array"][$key] .= ' stamp-' . $query_status_manager;
              } else {
                $vars["classes_array"][$key] .= ' stamp-archive';
              }
            } else {
              if ($query_status_manager == 'processing') {
                $vars["classes_array"][$key] .= ' stamp-processing';
              }
            }
          }
        }
      } else {
        $vars["classes_array"][$key] .= ' stamp-archive';
      }

      // утверждённая заявка
      if (!$has_plan_after || $query_type == 'main') {
        if (!$actual_queries
          && $query_status_manager != 'processing'
          && $query_status_client == 'approved') {
          $vars["classes_array"][$key] .= ' actual';
        } elseif ($query_status_manager == 'processing' || $query_status_client == 'processing') {
          $vars["classes_array"][$key] .= ' processing';
        }
      }

      if (empty($vars["view"]->result[$key]->field_data_field_load_field_load_target_id)) {
        $vars["classes_array"][$key] .= ' no-load';
      }


      // добавить класс, если заявка от Клиента
      if ($query_author_id) {
        $vars["classes_array"][$key] .= ' from-client';
      }
    }

    // обернуть Заявки до Актуальной в Архив
    if (count($vars["rows"]) > 1) {
      $start_row_key = -1;
      foreach ($vars["rows"] as $key => $row) {
        if (
//          $vars["view"]->result[$key]->field_field_query_status_client[0]["raw"]["value"] == 'approved'
//          && in_array($vars["view"]->result[$key]->field_field_query_status_manager[0]["raw"]["value"], ['approved', 'deny']) &&
          $start_row_key == -1) {
          $start_row_key = $key + 1;
        }
      }
      if ($start_row_key != -1) {
        $end_row_key = array_key_last($vars["rows"]);
        $vars["prefix_row_key"] = $start_row_key;
        $vars["suffix_row_key"] = $end_row_key;
      }
    }
  }

  if ($vars['view']->name == 'produce_units_load_client' && $vars['view']->current_display == 'page') {
    $vars["view"]->attachment_before = '<div class="produce-unit-legenda"><span></span>- установка свободна <span class="loaded"></span>- установка загружена <span class="selected"></span>- производство продукции</div>';

    // исключить пустые строки
    $rows = [];
    foreach ($vars["rows"] as $key => $row) {
      if (strpos($row, '<div class="produce-unit">') !== false) $rows[] = $row;
    }
    $vars["rows"] = $rows;
  }
}


/**
 * hook_preprocess_views_view_unformatted()
 */
function query_preprocess_views_view_table(&$vars)
{
  if ($vars['view']->name == 'nomenklatura' && $vars['view']->current_display == 'page') {
    $rows = [];
    foreach ($vars["rows"] as $key => $row) {
      // заменить на артикул и название давальца
      $name_arr = [];
      if (!empty($vars["view"]->result[$key]->field_field_oc_artikul_davalec[0]["raw"]["value"])) {
        $name_arr[] = $vars["view"]->result[$key]->field_field_oc_artikul_davalec[0]["raw"]["value"];
      }
      if (!empty($vars["view"]->result[$key]->field_field_oc_name_davalec[0]["raw"]["value"])) {
        $name_arr[] = $vars["view"]->result[$key]->field_field_oc_name_davalec[0]["raw"]["value"];
      }
      if ($name = trim(implode(' ', $name_arr))) {
        $row["name"] = $name;
      }

      if ($row['produce_unit_load_amount']) $rows[] = $row;
    }
    $vars["rows"] = $rows;
  }
}

/**
 * hook_preprocess_views_view_field()
 */
function query_preprocess_views_view_field(&$vars)
{
  if ($vars["view"]->name == 'queries' && isset($vars["field"]->field_info["field_name"])) {
    if ($vars["field"]->field_info["field_name"] == 'field_nomenklatura') {
      $name = [];
      $artikul = empty($vars["row"]->field_field_oc_artikul_davalec[0]["raw"]["value"]) ? '' : $vars["row"]->field_field_oc_artikul_davalec[0]["raw"]["value"];
      if ($artikul) $name[] = $artikul;
      $title = empty($vars["row"]->field_field_oc_name_davalec[0]["raw"]["value"]) ? $vars["output"] : $vars["row"]->field_field_oc_name_davalec[0]["raw"]["value"];
      if ($title) $name[] = $title;
      if ($name) {
        $vars["output"] = implode(' ', $name);
      }
    }

    if ($vars["field"]->field_info["field_name"] == 'field_query_status_manager') {
      if ($vars["row"]->field_field_query_type[0]["raw"]["value"] == 'main' && $vars["row"]->field_field_query_status_client[0]["raw"]["value"] == 'approved') {
        $vars["output"] = 'Утверждён';
      }
      elseif (!empty($vars["row"]->eck_query_uid)) {
        if ($vars["row"]->field_field_query_type[0]["raw"]["value"] == 'correction' && $vars["row"]->field_field_query_status_manager[0]["raw"]["value"] == 'approved') {
          $vars["output"] = 'Утверждена';
        }
      }
      elseif ($vars["row"]->field_field_query_type[0]["raw"]["value"] != 'deny' && $vars["row"]->field_field_query_status_client[0]["raw"]["value"] == 'processing') {
          $vars["output"] = 'На согласовании';
      }
      elseif ($vars["row"]->field_field_query_status_client[0]["raw"]["value"] == 'approved'
        && $vars["row"]->field_field_query_status_manager[0]["raw"]["value"] == 'approved'
        && $vars["row"]->field_field_qty[0]["raw"]["value"] == 0) {
          $vars["output"] = 'Производство отменено';
      }
      else {
        $vars["output"] = '';
      }
    }
  }

  if ($vars["view"]->name == 'produced_nomenklatura') {
    if ($vars["field"]->field_alias == 'taxonomy_term_data_name') {
      $name = [];
      $artikul = empty($vars["row"]->field_field_oc_artikul_davalec[0]["raw"]["value"]) ? '' : $vars["row"]->field_field_oc_artikul_davalec[0]["raw"]["value"];
      if ($artikul) $name[] = $artikul;
      $title = empty($vars["row"]->field_field_oc_name_davalec[0]["raw"]["value"]) ? $vars["output"] : $vars["row"]->field_field_oc_name_davalec[0]["raw"]["value"];
      if ($title) $name[] = $title;
      if ($name) {
        $vars["output"] = implode(' ', $name);
      }

    }
    if (isset($vars["field"]->field_info["field_name"]) && $vars["field"]->field_info["field_name"] == 'field_produce_output') {
      $vars["output"] = number_format($vars["field"]->original_value, 0, ',', ' ');
    }
  }
}


/**
 * обновить Загрузку в Запросе
 */
function query_query_load_update($query_id, $load_array)
{
  $query_wr = entity_metadata_wrapper('query', $query_id);
  if ($query_wr->value()) {
    // удалить старые записи
    $ids = [];
    foreach ($query_wr->field_load->getIterator() as $field_load_wr) {
      $ids[] = $field_load_wr->getIdentifier();
    }
    entity_delete_multiple('load', $ids);
    $query_wr->field_load->set(null);

    // создать новые
    foreach ($load_array as $load_item) {
      $load = entity_create('load', ['type' => 'load']);
      $load_wr = entity_metadata_wrapper('load', $load);
      $load_wr->field_produce_unit = $load_item['field_produce_unit'];
      $load_wr->field_produce_date = $load_item['field_produce_date'];
      $load_wr->field_produce_output = $load_item['field_produce_output'];
      $load_wr->save();
      $query_wr->field_load[] = $load_wr->getIdentifier();
    }

    $query_wr->save();
  }
}

function query_get_produce_unit_by_1cID($produce_unit_1cID)
{
  $vid = taxonomy_vocabulary_machine_name_load('produce_units')->vid;
  $query = new EntityFieldQuery();
  $terms = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $vid)
    ->fieldCondition('field_oc_produce_unit_id', 'value', $produce_unit_1cID)
    ->execute();

  if ($terms) {
    $entities = entity_load('taxonomy_term', [current($terms['taxonomy_term'])->tid]);
  }
  return empty($entities) ? false: current($entities);
}

function query_get_nomenklatura_by_artikul($articul)
{
  $nom_vid = taxonomy_vocabulary_machine_name_load('nomenklatura')->vid;
  $query = new EntityFieldQuery();
  $terms = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $nom_vid)
    ->fieldCondition('field_oc_artikul', 'value', $articul)
    ->execute();
  if ($terms) {
    $entities = entity_load('taxonomy_term', [current($terms['taxonomy_term'])->tid]);
  }
  return empty($entities) ? false: current($entities);
}

/**
 * get_produce_units
 */
function query_get_produce_units_list()
{
  $vid = taxonomy_vocabulary_machine_name_load('produce_units')->vid;
  $query = new EntityFieldQuery();
  $terms = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $vid)
    ->execute();

  if ($terms) {
    $entities = entity_load('taxonomy_term', array_keys($terms['taxonomy_term']));
  }
  return empty($entities) ? false: $entities;
}

/**
 * получить Установки из Запроса
 * @param $query
 */
function query_get_produce_units_from_query($query)
{
  $produce_units = [];
  $query_wr = entity_metadata_wrapper('query', $query);
  foreach ($query_wr->field_load->getIterator() as $load_wr) {
    if ($load_wr->value()) {
      $pu_tid = $load_wr->field_produce_unit->tid->value();
      if (empty($produce_units[$pu_tid])) {
        $produce_units[$pu_tid] = [
          'tid' => $pu_tid,
          'name' => $load_wr->field_produce_unit->name->value(),
          'performance' => 0,
        ];
      }

      // определить максимальную производительность Запросе
      if ($produce_units[$pu_tid]['performance'] < $load_wr->field_produce_output->value()) {
        $produce_units[$pu_tid]['performance'] = $load_wr->field_produce_output->value();
      }
    }
  }
  return $produce_units;
}


/**
 * get_produce_unit_load
 */
function query_get_produce_unit_load($produce_unit_tid, $month_start, $date = null, $current_query = null)
{
//  $load_array = &drupal_static(__FUNCTION__);

  if (!isset($load_array)) {
    // Вернуть список Загрузки заданной установки на заданный месяц
    // учитывать нужно только утверждённые заявки
    // Загрузку нужно возвращать с привязкой к Номенклатуре,
    //  например,
    //  чтобы в корректирующих Заявке не выводить Загрузку из основной Заявки,
    //  т.к нужна возможность распределить её на эти даты снова
    // Для Плановых Заявок берём загрузку только из самой Заявки, она содержит и Сервисную Загрузку
    // Для промежуточных Заявок на изменения загрузку, в том числе сервисную собираем на дату Заявки
    // Для итоговых утверждённых Заявок и итоговой Загрузки установок собирается вся загрузка на месяц и выводится пересечение,
    //  поверх добавляется загрузка из последней сервисной Заявки

    $load_array = [];

    $ids = [];
    $is_current_query_main = false;
    $current_query_nom_tid = 0;

    // добавить id текущей Загрузки
    if ($current_query) {
      $current_query_wr = entity_metadata_wrapper('query', $current_query);
      $is_current_query_main = $current_query_wr->field_query_type->value() == 'main';
      $current_query_nom_tid = $current_query_wr->field_nomenklatura->tid->value();
      if ($current_query_wr->value()) {
        $ids = array_merge($ids, [$current_query_wr->getIdentifier()]);
      } else {
        $current_query = null;
      }
    }

    // план месяца
    $efquery = new EntityFieldQuery();
    $result_main = $efquery
      ->entityCondition('entity_type', 'query')
      ->fieldCondition('field_month', 'value', $month_start)
//      ->fieldCondition('field_query_status_client', 'value', ['approved', 'processing'], 'IN')
      ->fieldCondition('field_query_status_manager', 'value', 'approved')
      ->fieldCondition('field_query_type', 'value', 'main')
      ->execute();
    if ($result_main) {
      $ids = array_merge($ids, array_keys($result_main['query']));
    }

    // является ли текущая Заявка последней утверждённой
    $is_last_approved_query = false;
    if ($current_query) {
      $dbr = db_select('eck_query', 'q');
      $dbr->addField('q', 'id');
      $dbr->innerJoin('field_data_field_month', 'fm', 'fm.entity_id = q.id');
      $dbr->condition('fm.field_month_value', $month_start);
      $dbr->innerJoin('field_data_field_query_type', 'ft', 'ft.entity_id = q.id');
      $dbr->condition('ft.field_query_type_value', 'service', '!=');
      $dbr->innerJoin('field_data_field_nomenklatura', 'fn', 'fn.entity_id = q.id');
      $dbr->condition('fn.field_nomenklatura_target_id', $current_query_nom_tid);
      $dbr->innerJoin('field_data_field_query_status_client', 'fsc', 'fsc.entity_id = q.id');
      $dbr->condition('fsc.field_query_status_client_value', 'approved');
      $dbr->innerJoin('field_data_field_query_status_manager', 'fsm', 'fsm.entity_id = q.id');
      $dbr->condition('fsm.field_query_status_manager_value', 'approved');
      $dbr->orderBy('q.id', 'DESC');
      $dbr->range(0, 1);
      if ($result = $dbr->execute()->fetchField()) {
        $is_last_approved_query = $result == $current_query_wr->getIdentifier();
      }
    }

    // если Заявка не Плановая, то дополнительно собираем все утверждённые Изменения
    // если задана дата и это не последняя утверждённая Заявка с Загрузкой, то до этой даты
    if (!$current_query || !$is_current_query_main || $is_last_approved_query) {

      // утверждённые Корректировки
      // если задана дата и текущая Заявка - это не последняя утверждённая Заявка, то до этой даты
      $efquery = new EntityFieldQuery();
      $efquery
        ->entityCondition('entity_type', 'query')
        ->fieldCondition('field_query_type', 'value', 'correction')
        ->fieldCondition('field_month', 'value', $month_start)
        ->fieldCondition('field_query_status_client', 'value', 'approved')
        ->fieldCondition('field_query_status_manager', 'value', 'approved');
      if ($date && !$is_last_approved_query) {
        $efquery->propertyCondition('created', $date, '<=');
      }
      if ($result = $efquery->execute()) {
        $ids = array_merge($ids, array_keys($result['query']));
      }

      // последняя Сервисная Заявка по установке
      // если задана дата и текущая Заявка - это не последняя утверждённая Заявка, то до этой даты
      $dbr = db_select('eck_query', 'q');
      $dbr->addField('q', 'id');
      $dbr->innerJoin('field_data_field_month', 'fm', 'fm.entity_id = q.id');
      $dbr->condition('fm.field_month_value', $month_start);
      $dbr->innerJoin('field_data_field_load', 'fl', 'fl.entity_id = q.id');
      $dbr->innerJoin('field_data_field_produce_unit', 'fpu', 'fpu.entity_id = fl.field_load_target_id');
      $dbr->condition('fpu.field_produce_unit_tid', $produce_unit_tid);
      if ($date && !$is_last_approved_query) {
        $dbr->condition('q.created', $date, '<=');
      }
      $dbr->orderBy('q.id', 'DESC');
      $dbr->range(0, 1);
      if ($result = $dbr->execute()->fetchField()) {
        $ids = array_merge($ids, [$result]);
      }
    }

    if ($ids) {
      $load_nomenklatura = [];
      $queries = entity_load('query', $ids);

      // исключить неактуальные Заявки (для которых есть корректировки)
      // (оставляем последнюю утверждённую для Номенклатуры)
      // Заявка на отмену не должна содержать загрузку, так как отсутствие Загрузки и будет отменой
      // массив Номенклатура - Заявки
      foreach ($queries as $query) {
        $query_wr = entity_metadata_wrapper('query', $query);
        $nom_tid = $query_wr->field_nomenklatura->tid->value();
        if (empty($nom_query[$nom_tid]['created']) || $nom_query[$nom_tid]['created'] < $query_wr->created->value()) {
          $nom_query[$nom_tid] = [
            'query_id' => $query_wr->getIdentifier(),
            'created' => $query_wr->created->value(),
          ];
        }
      }

      // массив Загрузка - Номенклатура
      foreach ($queries as $query) {
        $query_wr = entity_metadata_wrapper('query', $query);
        $nom_tid = $query_wr->field_nomenklatura->tid->value();
        if ($nom_query[$nom_tid]['query_id'] == $query->id) {
          foreach ($query_wr->field_load->getIterator() as $load_wr) {
            $load_nomenklatura[$load_wr->getIdentifier()] = [
              'tid' => $nom_tid,
              'name' => $query_wr->field_nomenklatura->name->value(),
              'artikul_d' => $query_wr->field_nomenklatura->field_oc_artikul_davalec->value(),
              'name_d' => $query_wr->field_nomenklatura->field_oc_name_davalec->value(),
              'client_id' => $load_wr->field_produce_output->value() ? $query_wr->field_nomenklatura->field_user->uid->value() : 0,
            ];
          }
        }
      }

      if ($load_nomenklatura) {
        $load = entity_load('load', array_keys($load_nomenklatura));
        // Загрузка для заданной Установки
        // массив Загрузка - Данные
        foreach ($load as $load_item) {
          if ($load_item->field_produce_unit["und"][0]["tid"] == $produce_unit_tid) {
            $day_start = $load_item->field_produce_date["und"][0]["value"];
            $load_array[$day_start] = [
              'output' => $load_item->field_produce_output["und"][0]["value"],
              'nomenklatura' => $load_item->field_produce_output["und"][0]["value"] ? $load_nomenklatura[$load_item->id] : ['tid' => 0, 'client_id' => 0, 'name' => 'Технические работы'],
            ];
          }
        }

        // если задана текущая Заявка, добавить дополнительные данные
        $current_client_id = $GLOBALS['user']->uid;
        if ($current_query) {
          if ($current_nom_tid = $current_query_wr->field_nomenklatura->tid->value()) {
            $current_client_id = $current_query_wr->field_nomenklatura->field_user->uid->value();
            $current_query_type = $current_query_wr->field_query_type->value();

            // is_current_load
            foreach ($current_query_wr->field_load->getIterator() as $current_load_wr) {
              if (empty($load_array[$current_load_wr->field_produce_date->value()]) && !empty($load_nomenklatura[$current_load_wr->getIdentifier()])) {
                $load_array[$current_load_wr->field_produce_date->value()] = [
                  'output' => $current_load_wr->field_produce_output->value(),
                  'nomenklatura' => $load_nomenklatura[$current_load_wr->getIdentifier()],
                ];
              }
              if ($current_load_wr->field_produce_output->value()) {
                $load_array[$current_load_wr->field_produce_date->value()]['is_current_load'] = true;
              }
            }
          }
        }

        $today_start = gmmktime(0, 0, 0, date('n'), date('j'), date('Y'));
        foreach ($load_array as $day_start => $load_array_item) {
          // для текущей Номенклатуры занятость не выводим (в случае заполнения корректирующей Заявки)
          $load_array[$day_start]['is_busy'] = !empty($load_array[$day_start]['nomenklatura']) && isset($current_nom_tid) && $load_array[$day_start]['nomenklatura']['tid'] != $current_nom_tid;
          // дозаполним текущую Загрузку для которой значение false
          $load_array[$day_start]['is_current_load'] = !empty($load_array[$day_start]['is_current_load']);

          // дата недоступна для выбора в корректирующей Заявке для Клиента до сегодня и ещё спустя DAYS_UNAVAILABLE дней
          // данные могут быть получены из начальной и корректирующей Заявок
          $load_array[$day_start]['is_unavailable'] =
            !user_has_role(ROLE_MANAGER)
            && ($day_start < $today_start + DAYS_UNAVAILABLE * 24 * 60 * 60)
            && ($current_query && in_array($current_query_type, ['main', 'correction']));

          // загрузка установки этим же клиентом
          $load_array[$day_start]['is_busy_same_company'] = !empty($load_array[$day_start]['nomenklatura']) && isset($current_client_id) && $load_array[$day_start]['nomenklatura']['client_id'] == $current_client_id;

          $classes = [];
          if ($load_array[$day_start]['is_busy_same_company'] && !$load_array[$day_start]['is_current_load']) {
            $classes[] = 'company-loaded';
          } else {
            if ($load_array[$day_start]['is_busy'] && !$load_array[$day_start]['is_current_load']) $classes[] = 'loaded';
          }

//              if ($load_array[$day_start]['is_busy'] && !$load_array[$day_start]['is_current_load']) $classes[] = 'loaded';
          if ($load_array[$day_start]['is_current_load']) $classes[] = 'selected';
          if ($load_array[$day_start]['is_unavailable'] && !$load_array[$day_start]['is_current_load']) $classes[] = 'unavailable';
          $load_array[$day_start]['classes'] = $classes;
        }
      }

    }
  }
  return $load_array;
}

/**
 * Implements hook_entity_delete().
 */
function query_entity_delete($entity, $type)
{
  // при удалении Запроса удалить всю Загрузку
  if ($entity->type == 'query') {
    if (!empty($entity->field_load['und'])) {
      $ids = [];
      foreach ($entity->field_load['und'] as $item) {
        $ids[] = $item['target_id'];
      }
      entity_delete_multiple('load', $ids);
    }
  }
}

function query_get_messages_html($data)
{
  $messages_html = '';
  if ($messages = unserialize($data)) {
    foreach ($messages as $time => $message) {
      $messages_html .=
        '<div>' .
        '<div>' . date('d.m.y h:m', $time) . '</div>' .
        '<div>' . ($message['from'] == 'user' ? '&nbsp;>>&nbsp;' : '&nbsp;<<&nbsp;') . '</div>' .
        '<div>' . $message['message'] . '</div>' .
        '</div>';
    }
  }

  return '<div>' . $messages_html . '</div>';
}


/**
 * query_approve_callback
 * обработчик кновки согласования
 */
//function query_plan_approve_callback($month_start)
//{
//  $queries = [];
//
//  $efquery = new EntityFieldQuery();
//  $result_main = $efquery
//    ->entityCondition('entity_type', 'query')
//    ->fieldCondition('field_month', 'value', $month_start)
//    ->fieldCondition('field_query_status_client', 'value', 'processing')
//    ->fieldCondition('field_query_status_manager', 'value', 'approved')
//    ->fieldCondition('field_query_type', 'value', 'main')
//    ->execute();
//  if ($result_main) {
//    $queries = array_keys($result_main['query']);
//  }
//
//  if ($queries) {
//    foreach($queries as $query_id) {
//     query_query_approve($query_id, false);
//    }
//    drupal_set_message('План согласован');
//    // todo отправить письмо менеджерам о согласовании плана клиентом
//  }
//
//  drupal_goto('<front>');
//}

/**
 * query_approve_callback
 * обработчик кновки согласования
 */
function query_approve_callback($query_id)
{
  if (is_numeric($query_id)) {
    query_query_approve($query_id, user_has_role(ROLE_MANAGER));
    drupal_set_message('Заявка ' . $query_id . (user_has_role(ROLE_MANAGER) ? ' утверждена' : ' согласована'));
  } else {
    drupal_set_message('Ошибка при выполнении запроса', 'warning');
  }

  drupal_goto('<front>');
}

/**
 * @param $query_id
 * @param $managers_status - по умолчанию меняем статус менеджера
 * смена статуса Заявки
 */
function query_query_approve($query_id, $managers_status = true)
{
  $query_wr = entity_metadata_wrapper('query', $query_id);
  if ($query_wr->value()) {
    // менеджер или клиент
    if ($managers_status) {
      $query_wr->field_query_status_manager = 'approved';
      $query_wr->save();
    } else {
      // проверка прав
      if ($query_wr->field_nomenklatura->field_user->uid->value() == $GLOBALS['user']->uid) {
        $query_wr->field_query_status_client = 'approved';
        $query_wr->save();
      }
    }
  }

  return true;
}

/**
 * проверка, началось ли производство по Заявке
 * @param $query
 * @return bool
 */
function query_check_query_produce_started($query)
{
  $today_start = gmmktime(0, 0, 0, date('n', time()), date('j', time()), date('Y', time()));
  $query_wr = entity_metadata_wrapper('query', $query);
  foreach ($query_wr->field_load->getIterator() as $load_wr) {
    if ($load_wr->value()) {
      // за сутки до начала производства и позже - производство началось
      if ($today_start > $load_wr->field_produce_date->value() - 24*60*60) {
        return true;
      }
    }
  }

  return false;
}

/**
 * проверка, закончилось ли производство по Заявке (последняя дата считается за окончание)
 * @param $query
 * @return bool
 */
function query_check_query_produce_finished($query)
{
  $today_start = gmmktime(0, 0, 0, date('n'), date('j'), date('Y'));
  $query_wr = entity_metadata_wrapper('query', $query);
  $date_start = null;
  foreach ($query_wr->field_load->getIterator() as $load_wr) {
    if ($load_wr->value()) {
      // за сутки до начала производства и позже - производство началось
      $date_start = $load_wr->field_produce_date->value();
      if ($today_start < $date_start) {
        return false;
      }
    }
  }

  return $date_start ? true : false;
}

function query_date_select_process_alter(&$element, $form_state, $context)
{
  // заменить короткие месяца на полные
  if (!empty($element["month"]["#options"])) {
    foreach ($element["month"]["#options"] as $key => &$option) {
      $year = $element["year"]["#default_value"];
      if (!empty($form_state["values"]["field_produce_date_value"]["value"]["year"])) {
         $year = $form_state["values"]["field_produce_date_value"]["value"]["year"];
      } elseif (!empty($form_state["values"]["field_month_value"]['year'])) {
        $year = $form_state["values"]["field_month_value"]["value"]["year"];
      }
      if (is_numeric($key)) $option = t(date('F', gmmktime(0, 0, 0, $key, 1, $year)));
    }
  }
}

function query_cron()
{
  query_process_incoming_files();
}

function query_process_incoming_files()
{
  require_once 'includes/query.import.inc';

  $directory = 'private://exchange/';

  // -- Справочник Давальцев
  // получить список файлов по шаблону
  $mask = '/dav.*\.json/';
  $files = file_scan_directory($directory, $mask, [], 0);

  // импортировать
  if ($files) {
    foreach($files as $file) {
      $array = drupal_json_decode(file_get_contents($file->uri));
      if (query_davalec_import($array)) {
        file_unmanaged_delete($file->uri);
      }
    }
  }

  // -- Справочник Установок
  // получить список файлов по шаблону
  $mask = '/ust.*\.json/';
  $files = file_scan_directory($directory, $mask, [], 0);

  // импортировать
  if ($files) {
    foreach($files as $file) {
      $array = drupal_json_decode(file_get_contents($file->uri));
      if (query_produce_units_import($array)) {
        file_unmanaged_delete($file->uri);
      }
    }
  }

  // -- Справочник Причин
  // получить список файлов по шаблону
  $mask = '/cause.*\.json/';
  $files = file_scan_directory($directory, $mask, [], 0);

  // импортировать
  if ($files) {
    foreach($files as $file) {
      $array = drupal_json_decode(file_get_contents($file->uri));
      if (query_reasons_import($array)) {
        file_unmanaged_delete($file->uri);
      }
    }
  }

  // -- Справочник Номенклатуры
  // получить список файлов по шаблону
  $mask = '/nom.*\.json/';
  $files = file_scan_directory($directory, $mask, [], 0);

  // импортировать
  if ($files) {
    foreach($files as $file) {
      $array = drupal_json_decode(file_get_contents($file->uri));
      if (query_nomenklatura_import($array)) {
        file_unmanaged_delete($file->uri);
      }
    }
  }

  // -- Заявки
  // -- здесь грузим для предварительного плана, только с type: 'pred'
  // получить список файлов по шаблону
  $mask = '/query_import_.*.json/';
  $files = file_scan_directory($directory, $mask, [], 0);

  // импортировать
  if ($files) {
    foreach($files as $file) {
      $array = drupal_json_decode(file_get_contents($file->uri));
      if ($array['type'] == 'pred') {
        if (query_query_import($array)) {
          file_unmanaged_delete($file->uri);
        }
      }
    }
  }

  // -- План
  // получить список файлов по шаблону
  $mask = '/plan.*\.json/';
  $files = file_scan_directory($directory, $mask, [], 0);

  // импортировать
  if ($files) {
    foreach($files as $file) {
      $array = drupal_json_decode(file_get_contents($file->uri));
      query_produce_plan_import($array);
      file_unmanaged_delete($file->uri);
    }
  }

  // -- Заявки
  // -- здесь грузим для утверждённого плана, только с type: 'main'
  // получить список файлов по шаблону
  $mask = '/query_import_.*.json/';
  $files = file_scan_directory($directory, $mask, [], 0);

  // импортировать
  if ($files) {
    foreach($files as $file) {
      $array = drupal_json_decode(file_get_contents($file->uri));
      if ($array['type'] == 'main') {
        if (query_query_import($array)) {
          file_unmanaged_delete($file->uri);
        }
      }
    }
  }
}
