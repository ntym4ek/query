<?

/**
 * Implementation of hook_menu().
 */
function query_menu()
{
  $items['plan/import'] = array(
    'page callback' => 'query_import',
    'access callback' => true,
    'file' => 'includes/query.import.inc',
    'type' => MENU_CALLBACK,
  );
  $items['plan/delete'] = array(
    'page callback' => 'query_delete',
    'access callback' => true,
    'file' => 'includes/query.import.inc',
    'type' => MENU_CALLBACK,
  );
  $items['query/%/correction/add'] = array(
    'page callback' => 'query_add_correction',
    'page arguments' => [1],
    'access callback' => true,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function query_menu_alter(&$items)
{
  // убрать материалы с Главной
  $items['node']['page callback'] = 'query_empty_front_page_callback';

  // "Удалить" в локальные задачи материала
  // http://xandeadx.ru/blog/drupal/339
  $items['node/%node/delete']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;

  // убрать восстановление пароля со страницы входа
  $items['user/password']['access callback'] = false;
}

/**
 * menu callback
 * убрать материалы с главной
 */
function query_empty_front_page_callback()
{
  drupal_set_title('');
  return [];
}

/**
 * hook_form_FORM_ID_alter
 */
function query_form_alter(&$form, &$form_state, $form_id)
{
  // ограничить менеджеров и клиентов
  if (in_array($form_id, ['eck__entity__form_add_query_query', 'eck__entity__form_edit_query_query'])) {
    if (!user_has_role(ROLE_ADMIN, $GLOBALS['user'])) {
      $form["field_load"]["#access"] = false;
      $form["field_query_type"]["#access"] = false;
      $form["field_query_status_client"]["#access"] = false;
      $form["field_query_status_manager"]["#access"] = false;
      $form['field_comment']['#access'] = false;

      if ($form["field_query_type"]["und"]["#default_value"][0] == 'correction') {
        $form["field_nomenklatura"]['#disabled'] = true;
        $form["field_month"]['#disabled'] = true;
      }

      // ограничить клиентов
      if (!user_has_role(ROLE_MANAGER, $GLOBALS['user'])) {

        // ограничить Номенклатуру текущим юзером
        $query = new EntityFieldQuery();
        $terms = $query
          ->entityCondition('entity_type', 'taxonomy_term')
          ->propertyCondition('vid', taxonomy_vocabulary_machine_name_load('nomenklatura')->vid)
          ->fieldCondition('field_user', 'target_id', $GLOBALS['user']->uid)
          ->execute();
        if ($terms) {
          $options = [];
          foreach ($terms['taxonomy_term'] as $term) {
            $options[$term->tid] = $form["field_nomenklatura"]["und"]["#options"][$term->tid];
          }
          if ($options) {
            $form["field_nomenklatura"]["und"]["#options"] = $options;
          }
        }
      }
    }

    // комментарий выведем текстом и строкой для добавления
    $form['field_comment']['#access'] = false;

    $form['comment'] = [
      '#type' => 'container',
      '#weight' => 10,
      '#attributes' => ['class' => ['message-content']],
    ];
    if (empty($form_state["query"]->is_new)) {
      $form['comment']['text'] = [
        '#type' => 'item',
        '#title' => 'Сообщения',
        '#markup' => query_get_messages_html($form["field_comment"]["und"][0]["value"]["#default_value"]),
      ];
    }
    $form['comment']['comment_add'] = [
      '#type' => 'textarea',
      '#title' => !empty($form_state["query"]->is_new) ? 'Сообщение' : '',
      '#rows' => 3,
    ];

    $form["#validate"][] = 'query_form_eck__entity__form_query_query_validate';
  }

  if (in_array($form_id, ['eck__entity__form_add_query_query', 'eck__entity__form_edit_query_query', 'eck__entity__delete_form'])) {
    $form["#submit"][] = 'query_form_redirect_submit';
  }
}

function query_get_messages_html($data)
{
  $messages_html = '';
  if ($messages = unserialize($data)) {
    foreach ($messages as $time => $message) {
      $messages_html .=
        '<div>' .
          '<div>' . date('d.m.y h:m', $time) . '</div>' .
          '<div>' . ($message['from'] == 'user' ? '&nbsp;>>&nbsp;' : '&nbsp;<<&nbsp;') . '</div>' .
          '<div>' . $message['message'] . '</div>' .
        '</div>';
    }
  }

  return '<div>' . $messages_html . '</div>';
}

/**
 * query_form_eck__entity__form validate callback
 */
function query_form_eck__entity__form_query_query_validate(&$form, &$form_state)
{
  // новое сообщение внести в основное поле комментария
  if ($form_state["values"]["comment_add"]) {
    $messages = unserialize($form_state["values"]["field_comment"]["und"][0]["value"]);
    if (!$messages) $messages = [];
    $timestamp = time();
    $messages[$timestamp]['message'] = $form_state["values"]["comment_add"];
    $messages[$timestamp]['from'] = user_has_role(ROLE_MANAGER) ? 'manager' : 'user';
    $form_state["values"]["field_comment"]["und"][0]["value"] = serialize($messages);
  }
}

function query_form_redirect_submit(&$form, &$form_state)
{
  // отправить письмо
//  $params['qid'] = $form_state["values"]["entity"]->id;
//  $params['period'] = ['value' => $form_state["values"]["field_period"]["und"][0]["value"], 'value2' => $form_state["values"]["field_period"]["und"][0]["value2"]];
//  $params['country'] = $form_state["values"]["field_country"]["und"][0]["value"];
//  $params['product'] = $form_state["values"]["field_product"]["und"][0]["value"];
//  $params['package'] = taxonomy_term_load($form_state["values"]["field_package"]["und"][0]["tid"])->name;
//  $params['qty'] = $form_state["values"]["field_qty"]["und"][0]["value"];
//  drupal_mail('mailer', 'manager_notify_new_query', MANAGER_EMAIL, language_default(), $params);

  if (!user_has_role(ROLE_ADMIN)) {
    $form_state['redirect'] = user_has_role(ROLE_MANAGER) ? 'manage' : 'queries';
  }
}


/**
 * Implements hook_views_api().
 */
function query_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'query') . '/views',
  );
}

/**
 * Implements hook_views_data_alter().
 */
function query_views_data_alter(&$data)
{
  $data['eck_query']['produce_units_form'] = array(
    'field' => array(
      'title' => t('Produce units'),
      'help' => t('View and select produce units.'),
      'handler' => 'query_handler_field_produce_units_form',
    ),
  );
  $data['eck_query']['actions'] = array(
    'field' => array(
      'title' => t('Actions'),
      'help' => t('Conditional actions'),
      'handler' => 'query_handler_field_actions',
    ),
  );
  $data['eck_query']['comment'] = array(
    'field' => array(
      'title' => t('Formatted Comment'),
      'handler' => 'query_handler_field_comment',
    ),
  );
  $data['taxonomy_term_data']['produce_unit_load'] = array(
    'field' => array(
      'title' => t('Produce Unit Load'),
      'help' => t('Produce Unit Load'),
      'handler' => 'query_handler_field_produce_unit_load',
    ),
  );
}


/**
 * hook_preprocess_views_view_unformatted()
 */
function query_preprocess_views_view_unformatted(&$vars)
{
  // добавить класс строке основного Запроса, если есть корректирующий
  if (in_array($vars['view']->name, ['queries', 'manager_queries']) && $vars['view']->current_display == 'page_1') {
    foreach ($vars["classes"] as $key => $value) {
      if ($vars["view"]->result[$key]->field_field_query_type[0]["raw"]["value"] == 'main') {
        $efquery = new EntityFieldQuery();
        $has_correction = $efquery
          ->entityCondition('entity_type', 'query')
          ->fieldCondition('field_month', 'value', $vars["view"]->result[$key]->field_field_month[0]["raw"]["value"])
          ->fieldCondition('field_nomenklatura', 'target_id', $vars["view"]->result[$key]->field_field_nomenklatura[0]["raw"]["target_id"])
          ->fieldCondition('field_query_type', 'value', 'correction')
          ->count()
          ->execute();

        if ($has_correction) {
          $vars["classes_array"][$key] .= ' locked';
        }
      }
    }
  }
}

/**
 * Builds an appropriate cart form ID based on the query and unit ids.
 *
 * @see query_forms().
 */
function query_produce_unit_select_dates_form_id($query_id)
{
  return 'query_produce_unit_select_dates_form_' . $query_id;
}

/**
 * Implements hook_forms().
 *
 * To provide distinct form IDs for forms, the query and unit ids
 * referenced by the form are appended to the base ID,
 * query_produce_unit_select_dates_form. When such a form is built or submitted, this
 * function will return the proper callback function to use for the given form.
 */
function query_forms($form_id, $args)
{
  $forms = array();

  // Construct a valid cart form ID from the arguments.
  if (strpos($form_id, 'query_produce_unit_select_dates_form_') === 0) {
    $forms[$form_id] = array(
      'callback' => 'query_produce_unit_select_dates_form',
    );
  }

  return $forms;
}

/**
 * produce_unit_select_dates_form
 * форма выбора периодов из свободных дат для производства продукта
 */
function query_produce_unit_select_dates_form($form, &$form_state, $query_id)
{
  // todo добавить легенду
  // todo 1. занято
  // todo 2. свободно
  // todo 3. запрос
  // todo 3. пересечение запрошенных дат с занятыми (менеджеру)

  $query_wr = entity_metadata_wrapper('query', $query_id);
  $is_query_locked = $query_wr->field_query_status_client->value() == 'approved' && $query_wr->field_query_status_manager->value() == 'approved';
  $month_start = $query_wr->field_month->value();
  $nom_tid = $query_wr->field_nomenklatura->tid->value();

  // получить все установки, годные для производства Номенклатуры
  $produce_units = query_get_produce_units_by_product($nom_tid);

  // значения Загрузки по умолчанию
  $current_load = [];
  $current_load_days = 0;
  foreach ($query_wr->field_load->getIterator() as $load_wr) {
    if ($load_wr->value()) {
      $pu_tid = $load_wr->field_produce_unit->tid->value();
      $current_load[$pu_tid][$load_wr->field_produce_date->value()] = $load_wr->field_produce_output->value();
      $current_load_days++;

      // добавить установки из Загрузки (пока нет связи Номенклатура-Установка)
      if (empty($produce_units[$pu_tid])) {
        $produce_units[$pu_tid] = [
          'tid' => $pu_tid,
          'name' => $load_wr->field_produce_unit->name->value(),
          'performance' => query_get_product_unit_performance_by_nomenklatura($pu_tid, $nom_tid),
        ];
      }
    }
  }

  $form_state['query'] = [
    'id' => $query_id,
    'month' => $month_start,
    'volume' => $query_wr->field_qty->value(),
    'produce_units' => $produce_units,
  ];
  $form['#attributes'] = ['class' => ['produce-unit-form']];

  foreach ($produce_units as $pu_tid => $produce_unit) {
    $produce_unit_load = query_get_produce_unit_load($pu_tid, $month_start);

    $form['produce_unit_' . $pu_tid] = [
      '#type' => 'container',
      '#attributes' => ['class' => ['produce-unit']],
    ];
    $form['produce_unit_' . $pu_tid]['name'] = [
      '#type' => 'item',
      '#title' => 'Установка',
      '#markup' => '<h3>' . $produce_unit['name'] . '</h3>',
      '#wrapper_attributes' => ['class' => ['produce-unit-name']],
    ];

    $form['produce_unit_' . $pu_tid]['selection'] = [
      '#type' => 'container',
      '#attributes' => ['class' => ['produce-unit-dates', 'form-item']],
    ];
    $form['produce_unit_' . $pu_tid]['selection']['title'] = [
      '#markup' => '<label class="control-label">Даты</label>',
    ];

    $form['produce_unit_' . $pu_tid]['selection']['dates'] = [
      '#type' => 'container',
      '#attributes' => ['class' => ['form-checkboxes']],
    ];

    // цикл по количеству дней в месяце
    for ($i = 1; $i <= date("t", $month_start); $i++) {

//      $today_start = gmmktime(0, 0, 0, date('n', 1608467456), date('j', 1608467456), date('Y', 1608467456));
      $today_start = gmmktime(0, 0, 0, date('n', time()), date('j', time()), date('Y', time()));
      $day_start = $month_start + ($i - 1) * 60 * 60 * 24;

      // для текущей Номенклатуры занятость не выводим (в случае заполнения корректирующей Заявки)
      $produce_unit_is_busy = !empty($produce_unit_load[$day_start]) && $produce_unit_load[$day_start]['nomenklatura']['tid'] != $nom_tid;
      $produce_unit_has_current_load = !empty($current_load[$pu_tid][$day_start]);

      // дата недоступня для выбора в корректирующей Заявке для Клиента до сегодня и ещё спустя три дня
      $produce_unit_is_unavailable = !user_has_role(ROLE_ADMIN)
                                  && !user_has_role(ROLE_MANAGER)
                                  && ($day_start < $today_start + 3 *24*60*60)
                                  && $query_wr->field_query_type->value() == 'correction';

      // вывести подсказку при наведении с выходом продукции в этот день
      $classes = [];
      if ($produce_unit_is_busy && !$produce_unit_has_current_load) $classes[] = 'loaded';
      if ($produce_unit_has_current_load) $classes[] = 'selected';
      if ($produce_unit_is_unavailable) $classes[] = 'unavailable';
      $tooltip = empty($current_load[$pu_tid][$day_start]) ? '' : ' data-toggle="tooltip" data-placement="top" title="' . $current_load[$pu_tid][$day_start] . '"';

      if ($is_query_locked) {
        $form['produce_unit_' . $pu_tid]['selection']['dates']['check_' . $pu_tid . '_' . $i] = [
          '#markup' => '<span class="c-box ' . implode(' ', $classes) . '"' . $tooltip . '>' . $i . '</span>',
        ];
      } else {
        $form['produce_unit_' . $pu_tid]['selection']['dates']['check_' . $pu_tid . '_' . $i] = [
          '#type' => 'checkbox',
          '#title' => '<span>' . $i . '</span>',
          '#disabled' => ($produce_unit_is_busy&&!$produce_unit_has_current_load) || $produce_unit_is_unavailable,
          '#default_value' => $produce_unit_has_current_load,
          '#attributes' => ['class' => $classes],
        ];
        if ($tooltip) {
          $form['produce_unit_' . $pu_tid]['selection']['dates']['check_' . $pu_tid . '_' . $i]['#wrapper_attributes'] = [
            'data-toggle' => 'tooltip',
            'data-placement' => 'top',
            'title' => $current_load[$pu_tid][$day_start],
          ];
        }
      }
    }

    if (!$is_query_locked) {
      $form['produce_unit_' . $pu_tid]['actions'] = array(
        '#type' => 'actions',
        '#weight' => 40,
      );
      $form['produce_unit_' . $pu_tid]['actions']['submit_' . $pu_tid] = array(
        '#type' => 'submit',
        '#name' => 'submit_' . $pu_tid,
        '#value' => t('Save'),
        '#attributes' => ['class' => ['btn-xs']],
      );
    }
  }

  $form['#submit'][] = 'query_produce_unit_select_dates_form_submit';

  return $form;
}

function query_produce_unit_select_dates_form_submit($form, $form_state)
{
  if ($produce_unit_tid = str_replace('submit_', '', $form_state["triggering_element"]["#name"])) {
    $month_start = $form_state["query"]["month"];
    $volume = $form_state["query"]["volume"];
    $performance = $form_state["query"]['produce_units'][$produce_unit_tid]["performance"];
    // сформировать Загрузку для выбранной установки
    $load = [];
    $i = 0;
    foreach ($form_state['values'] as $key => $value) {
      if (strpos($key, 'check_' . $produce_unit_tid) === 0 && $value) {
          $day = str_replace('check_' . $produce_unit_tid . '_', '', $key);
          $day_start = $month_start + ($day-1) * 60 * 60 * 24;
          // вычислить выход на день (Производительность или Остаток)
          $output = $volume-$i*$performance['amount'] >= $performance['amount'] ? $performance['amount'] : $volume-$i*$performance['amount'];
          if ($output <= 0) break;
          $i++;

          $load[] = [
            'field_produce_unit' => $produce_unit_tid,
            'field_produce_date' => $day_start,
            'field_produce_output' => $output,
          ];
      }
    }

    query_query_load_update($form_state['query']['id'], $load);
  }
}

/**
 * обновить Загрузку в Запросе
 */
function query_query_load_update($query_id, $load_array)
{
  $query_wr = entity_metadata_wrapper('query', $query_id);
  if ($query_wr->value()) {
    // удалить старые записи
    $ids = [];
    foreach ($query_wr->field_load->getIterator() as $field_load_wr) {
      $ids[] = $field_load_wr->getIdentifier();
    }
    entity_delete_multiple('load', $ids);
    $query_wr->field_load->set(null);

    // создать новые
    foreach ($load_array as $load_item) {
      $load = entity_create('load', ['type' => 'load']);
      $load_wr = entity_metadata_wrapper('load', $load);
      $load_wr->field_produce_unit = $load_item['field_produce_unit'];
      $load_wr->field_produce_date = $load_item['field_produce_date'];
      $load_wr->field_produce_output = $load_item['field_produce_output'];
      $load_wr->save();
      $query_wr->field_load[] = $load_wr->getIdentifier();
    }

    $query_wr->save();
  }
}

function query_get_produce_unit_by_1cID($produce_unit_1cID)
{
  $vid = taxonomy_vocabulary_machine_name_load('produce_units')->vid;
  $query = new EntityFieldQuery();
  $terms = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $vid)
    ->fieldCondition('field_oc_produce_unit_id', 'value', $produce_unit_1cID)
    ->execute();

  if ($terms) {
    $entities = entity_load('taxonomy_term', [current($terms['taxonomy_term'])->tid]);
  }
  return empty($entities) ? false: current($entities);
}

function query_get_nomenklatura_by_artikul($articul)
{
  $nom_vid = taxonomy_vocabulary_machine_name_load('nomenklatura')->vid;
  $query = new EntityFieldQuery();
  $terms = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $nom_vid)
    ->fieldCondition('field_oc_artikul', 'value', $articul)
    ->execute();
  if ($terms) {
    $entities = entity_load('taxonomy_term', [current($terms['taxonomy_term'])->tid]);
  }
  return empty($entities) ? false: current($entities);
}

/**
 * query_get_product_unit_performance_by_nomenklatura
 * @return array
 */
function query_get_product_unit_performance_by_nomenklatura($pu_tid, $nom_tid)
{
  $output = [];
  // todo заменить тестовые данные
  if ($pu_tid == 93 && $nom_tid == 301) {
    $output = [
      'amount' => 9700,
      'unit' => 'л',
    ];
  }
  return $output;
}

/**
 * get_produce_units_by_product
 */
function query_get_produce_units_by_product($nom_tid)
{
  // вернуть список установок, используемых для производства заданного продукта
  // todo для каждой установки узнать производительность
  $units = [];

//  $terms = taxonomy_get_tree(taxonomy_vocabulary_machine_name_load('produce_units')->vid, 0, null, true);
//  foreach ($terms as $term) {
//    $units[$term->tid] = [
//      'tid' => $term->tid,
//      'name' => $term->name,
//      'performance' => query_get_product_unit_performance_by_nomenklatura($term->tid, $nom_tid)
//    ];
//  }

  return $units;
}

/**
 * get_produce_unit_load
 */
function query_get_produce_unit_load($produce_unit_tid, $month_start)
{
  // todo добавить учёт даты в месяце, до которой нужно вернуть загрузку,
  // todo так как:
  // todo 1. в списке каждая следующая заявка должна отображать утверждённую занятость в зависимости от предыдущих
  // todo 2. если запрошенные даты двух заявок пересекаются, то нужно выделить цветом для второй, что установка уже занята
  // todo    и менеджеру нужно перенести запрос на свободные даты

  // todo добавить учёт времени на подготовку

  // вернуть список периодов загрузки заданной установки на заданный месяц
  // учитывать нужно только утверждённые заявки
  // todo Загрузку нужно возвращать с привязкой к Номенклатуре,
  // todo   например,
  // todo   чтобы в корректирующих Заявке не выводить Загрузку из основной Заявки,
  // todo   т.к нужна возможность распределить её на эти даты снова
  $load_array = [];

  // утверждённые Запросы месяца
  $efquery = new EntityFieldQuery();
  $result = $efquery
    ->entityCondition('entity_type', 'query')
    ->fieldCondition('field_month', 'value', $month_start)
    ->fieldCondition('field_query_status_client', 'value', 'approved')
    ->fieldCondition('field_query_status_manager', 'value', 'approved')
    ->execute();
  if ($result) {
    $load_nomenklatura = [];
    $queries = entity_load('query', array_keys($result['query']));
    foreach ($queries as $query) {
      $query_wr = entity_metadata_wrapper('query', $query);
      foreach ($query_wr->field_load->getIterator() as $load_wr) {
        $load_nomenklatura[$load_wr->getIdentifier()] = [
          'tid' => $query_wr->field_nomenklatura->tid->value(),
          'name' => $query_wr->field_nomenklatura->name->value()
        ];
      }
    }

    // Загрузка для заданной Установки
    if ($load_nomenklatura) {
      $load = entity_load('load', array_keys($load_nomenklatura));
      foreach ($load as $load_item) {
        if ($load_item->field_produce_unit["und"][0]["tid"] == $produce_unit_tid) {
          $load_array[$load_item->field_produce_date["und"][0]["value"]] = [
            'amount' => $load_item->field_produce_output["und"][0]["value"],
            'nomenklatura' => $load_nomenklatura[$load_item->id],
          ];
        }
      }
    }
  }

  return $load_array;
}

/**
 * Implements hook_entity_delete().
 */
function query_entity_delete($entity, $type)
{
  // при удалении Запроса удалить всю Загрузку
  if ($entity->type == 'query') {
    if (!empty($entity->field_load['und'])) {
      $ids = [];
      foreach ($entity->field_load['und'] as $item) {
        $ids[] = $item['target_id'];
      }
      entity_delete_multiple('load', $ids);
    }
  }
}

/**
 * Добавить корректирующую Заявку на базе основной
 * @param $query_id
 */
function query_add_correction($main_query_id)
{
  $main_query_wr = entity_metadata_wrapper('query', $main_query_id);

  // проверить наличие корректирующего Запроса на месяц даты
  $efquery = new EntityFieldQuery();
  $result = $efquery
    ->entityCondition('entity_type', 'query')
    ->fieldCondition('field_month', 'value', $main_query_wr->field_month->value())
    ->fieldCondition('field_nomenklatura', 'target_id', $main_query_wr->field_nomenklatura->tid->value())
    ->fieldCondition('field_query_type', 'value', 'correction')
    ->execute();

  if (!$result) {
    $query = entity_create('query', [
      'type' => 'query',
      'uid' => $main_query_wr->uid->uid->value(),
    ]);
    entity_save('query', $query);
  } else {
    $query = current($result['query']);
  }

  $query_wr = entity_metadata_wrapper('query', $query);
  $query_wr->field_month = $main_query_wr->field_month->value();
  $query_wr->field_nomenklatura = $main_query_wr->field_nomenklatura->tid->value();
  $query_wr->field_qty = $main_query_wr->field_qty->value();
  $query_wr->field_query_type = 'correction';
  $query_wr->field_query_status_client = 'new';
  $query_wr->field_query_status_manager = 'new';
  $query_wr->save();

  $load = [];
  $today_start = gmmktime(0, 0, 0, date('n', time()), date('j', time()), date('Y', time()));
  foreach ($main_query_wr->field_load->getIterator() as $field_load_wr) {
    // производство может быть запущено не ранее чем через 3 дня
    if ($field_load_wr->field_produce_date->value() >= $today_start + (1 + 3)*24*60*60) {
      $load[] = [
        'field_produce_unit' => $field_load_wr->field_produce_unit->tid->value(),
        'field_produce_date' => $field_load_wr->field_produce_date->value(),
        'field_produce_output' => $field_load_wr->field_produce_output->value(),
      ];
    }
  }

  query_query_load_update($query->id, $load);

  drupal_goto('<front>');
}

