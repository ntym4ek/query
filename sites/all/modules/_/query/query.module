<?

define('DAYS_BEFORE_PRODUCE_START', 1);
// Кол-во дней, которое начиная с текущей даты установка недоступна
// для выбора дат производства.
// Время нужно для согласования и подготовки установки к началу производства.
define('DAYS_UNAVAILABLE', 3);

/**
 * Implementation of hook_menu().
 */
function query_menu()
{
  $items['import/buzy'] = array(
    'page callback' => 'query_buzy_import',
    'access callback' => true,
    'file' => 'includes/query.import.inc',
    'type' => MENU_CALLBACK,
  );
  $items['import/plan'] = array(
    'page callback' => 'query_plan_import',
    'access callback' => true,
    'file' => 'includes/query.import.inc',
    'type' => MENU_CALLBACK,
  );
  $items['import/other'] = array(
    'page callback' => 'query_other_import',
    'access callback' => true,
    'file' => 'includes/query.import.inc',
    'type' => MENU_CALLBACK,
  );

  $items['plan/delete'] = array(
    'page callback' => 'query_plan_delete',
    'access callback' => true,
    'file' => 'includes/query.import.inc',
    'type' => MENU_CALLBACK,
  );

  $items['query/plan/%/approve'] = array(
    'page callback' => 'query_plan_approve_callback',
    'page arguments' => [2],
    'access callback' => true,
    'type' => MENU_CALLBACK,
  );

  $items['query/%/approve'] = array(
    'page callback' => 'query_approve_callback',
    'page arguments' => [1],
    'access callback' => true,
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/query/import'] = array(
    'title' => 'Импорт',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('query_import_form'),
    'access arguments' => array('access manager settings'),
    'file' => 'includes/query.import.inc',
  );

  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function query_menu_alter(&$items)
{
  // убрать материалы с Главной
  $items['node']['page callback'] = 'query_empty_front_page_callback';

  // "Удалить" в локальные задачи материала
  // http://xandeadx.ru/blog/drupal/339
  $items['node/%node/delete']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;

  // убрать восстановление пароля со страницы входа
  $items['user/password']['access callback'] = false;
}

/**
 * menu callback
 * убрать материалы с главной
 */
function query_empty_front_page_callback()
{
  drupal_set_title('');
  return [];
}

/**
 * hook_form_FORM_ID_alter
 */
function query_form_alter(&$form, &$form_state, $form_id)
{
  if ($form_id == 'eck__entity__form_add_query_query') {
    if (!empty($_GET['type'])) {
      $form_state['data']['query']['type'] = $_GET['type'];
    }

    // получить Запрос с которого сделана Корректировка
    if (!empty($_GET['last_query_id'])) {
      $last_query_wr = entity_metadata_wrapper('query', $_GET['last_query_id']);
      $form_state['data']['month_start'] = $last_query_wr->field_month->value();
      $form_state['data']['nom_tid'] = $last_query_wr->field_nomenklatura->tid->value();
      $form_state['data']['davalec_uid'] = $last_query_wr->field_nomenklatura->field_user->uid->value();
      $form_state['data']['last_query'] = [
        'id' => $last_query_wr->getIdentifier(),
        'type' => $last_query_wr->field_query_type->value(),
        'volume' => $last_query_wr->field_qty->value(),
      ];
    }

    if (!empty($form_state['data']['nom_tid'])) {
      // получить Запрос, в котором есть Загрузка
      $dbr = db_select('eck_query', 'q');
      $dbr->addField('q', 'id');
      $dbr->innerJoin('field_data_field_nomenklatura', 'fn', 'fn.entity_id = q.id');
      $dbr->condition('fn.field_nomenklatura_target_id', $form_state['data']['nom_tid']);
      $dbr->innerJoin('field_data_field_load', 'fl', 'fl.entity_id = q.id');
      $dbr->orderBy('q.id','DESC');
      $dbr->range(0,1);
      if ($eck_source = $dbr->execute()->fetchField()) {
        $source_query_wr = entity_metadata_wrapper('query', $eck_source);
        $load = [];
        foreach ($source_query_wr->field_load->getIterator() as $load_wr) {
          if ($load_wr->value()) {
            $load[$load_wr->field_produce_date->value()] = $load_wr->field_produce_output->value();
          }
        }
        $form_state['data']['source_query'] = [
          'id' => $source_query_wr->getIdentifier(),
          'type' => $source_query_wr->field_query_type->value(),
          'volume' => $source_query_wr->field_qty->value(),
          'load' => $load,
        ];
      }
    }


    if (!empty($form_state['data']['query']['type'])) {
      if ($form_state['data']['query']['type'] == 'correction') {
        drupal_set_title('Корректирующая заявка');
        $form["field_query_type"]["und"]["#default_value"][0] = 'correction';
      }
      if ($form_state['data']['query']['type'] == 'cancel') {
        drupal_set_title('Заявка на отмену производства');
        $form["field_query_type"]["und"]["#default_value"][0] = 'cancel';
      }

      if (user_has_role(ROLE_MANAGER)) {
        $form["field_query_status_client"]["und"]["#default_value"][0] = 'processing';
        $form["field_query_status_manager"]["und"]["#default_value"][0] = 'approved';
        $form["field_query_status_manager"]['#access'] = false;
      } else {
        $form["field_query_status_client"]["und"]["#default_value"][0] = 'approved';
        $form["field_query_status_manager"]["und"]["#default_value"][0] = 'processing';
      }
    }

    // если задан исходный Запрос
    // задать дефолтные значения
    if (!empty($form_state['data']['last_query']['volume'])) {
      $form["field_qty"]["und"][0]["value"]["#default_value"] = $form_state['data']['last_query']['volume'];
    }
    if (!empty($form_state['data']['month_start'])) {
      $form["field_month"]["und"][0]["#default_value"]["value"] = $form_state['data']['month_start'];
      $form["field_month"]["und"][0]["#default_value"]["value2"] = $form_state['data']['month_start'];
    }
    if (!empty($form_state['data']['nom_tid'])) {
      $form["field_nomenklatura"]["und"]["#default_value"] = [$form_state['data']['nom_tid']];
    }

    // Номенклатура Пользователя из Заявок текущего Месяца
    // чтобы исколючить выбор Номенклатуры по которой есть Заявки
    $nomenklatura_from_queries = [];
    if (!empty($form_state['data']['month_start']) && !empty($form_state['data']['davalec_uid'])) {
      $dbr = db_select('taxonomy_term_data', 'n');
      $dbr->condition('n.vid', taxonomy_vocabulary_machine_name_load('nomenklatura')->vid);
      $dbr->innerJoin('field_data_field_nomenklatura', 'fn', 'fn.field_nomenklatura_target_id = n.tid');
      $dbr->innerJoin('field_data_field_user', 'fu', 'fu.entity_id = n.tid');
      $dbr->condition('fu.field_user_target_id', $form_state['data']['davalec_uid']);
      $dbr->innerJoin('eck_query', 'q', 'q.id = fn.entity_id');
      $dbr->innerJoin('field_data_field_month', 'fm', 'fm.entity_id = q.id');
      $dbr->condition('fm.field_month_value', $form_state['data']['month_start']);
      $dbr->addField('n', 'tid');
      $dbr->distinct();
      $nomenklatura_from_queries = $dbr->execute()->fetchCol();
    }
  }


  if (in_array($form_id, ['eck__entity__form_add_query_query', 'eck__entity__form_edit_query_query'])) {
    if (!isset($nomenklatura_from_queries)) $nomenklatura_from_queries = [];
//    $month_start = empty($form_state['data']['source_query']['month_start']) ? 0 : $form_state['data']['source_query']['month_start'];
    $produce_units_list = query_get_produce_units_list();

    // обработать кнопку добавления Установки
    if (isset($form_state["triggering_element"]) && $form_state["triggering_element"]["#name"] == 'pu_add' && isset($form_state['values']['pu_select'])) {
      $form_state['data']['produce_units'][$form_state['values']['pu_select']] = [
        'tid' => $form_state['values']['pu_select'],
        'name' => $produce_units_list[$form_state['values']['pu_select']]->name,
        'performance' => null,
      ];
    }

    $form["field_qty"]["#weight"] = 2;

    if (!user_has_role(ROLE_ADMIN, $GLOBALS['user'])) {
      $form["field_load"]["#access"] = false;
      $form["field_query_type"]["#access"] = false;
      $form["field_query_status_client"]["#access"] = false;
      $form["field_query_status_manager"]["und"]["#title"] = 'Статус заявки';
      $form["actions"]["submit"]["#value"] = 'Сохранить и отправить';

      if (in_array($form["field_query_type"]["und"]["#default_value"][0], ['correction', 'cancel'])) {
        $form["field_nomenklatura"]['#disabled'] = true;
        $form["field_month"]['#disabled'] = true;
      }
      if ($form["field_query_type"]["und"]["#default_value"][0] == 'cancel') {
        $form["field_qty"]['#disabled'] = true;
        $form["actions"]["submit"]["#attributes"]['class'][] = 'btn-danger';
        $form["actions"]["submit"]["#value"] = 'Отменить производство';
      }

      // если Заявка создана клиентом, то менеджеру не показывать причину и необходимость согласования
      if ((!empty($form_state["query"]->is_new) && !user_has_role(ROLE_MANAGER))
        || empty($form_state["query"]->is_new) && !user_has_role(ROLE_MANAGER, user_load($form_state["query"]->uid))) {
        $form["field_query_reason"]["#access"] = false;
        $form["field_query_client_approve"]["#access"] = false;
      }

      // ограничить клиентов
      if (!user_has_role(ROLE_MANAGER, $GLOBALS['user'])) {
        $form["field_query_status_manager"]["#access"] = false;
        $form["field_query_client_approve"]["#access"] = false;
        $form["field_query_client_approve"]["und"]["#default_value"] = 1;
        // для клиента причина - по инициативе заказчика
        $form["field_query_reason"]["#access"] = false;
        $form["field_query_reason"]["und"]["#default_value"] = [553];

        // ограничить Номенклатуру текущим юзером
        $query = new EntityFieldQuery();
        $result = $query
          ->entityCondition('entity_type', 'taxonomy_term')
          ->propertyCondition('vid', taxonomy_vocabulary_machine_name_load('nomenklatura')->vid)
          ->fieldCondition('field_user', 'target_id', $GLOBALS['user']->uid)
          ->execute();
        if ($result) {
          $nomenklatura_all = entity_load('taxonomy_term', array_keys($result['taxonomy_term']));

          $options = [];
          foreach ($nomenklatura_all as $nomenklatura_term) {
            if (!empty($form["field_nomenklatura"]["und"]["#options"][$nomenklatura_term->tid])
              && strpos($form["field_nomenklatura"]["und"]["#options"][$nomenklatura_term->tid], '_') !== 0) {

              // при добавлении новой Заявки исключить Номенклатуру, по которой есть Заявки
              if ($form["field_query_type"]['und']['#default_value'][0] == 'main' && in_array($nomenklatura_term->tid, $nomenklatura_from_queries)) continue;
              // todo у клиентов своё наименование
              $name = $form["field_nomenklatura"]["und"]["#options"][$nomenklatura_term->tid];
              $options[$nomenklatura_term->tid] = $name;
            }
          }
          if ($options) {
            $form["field_nomenklatura"]["und"]["#options"] = $options;
            if (!$form["field_nomenklatura"]["und"]["#default_value"] || empty($options[current($form["field_nomenklatura"]["und"]["#default_value"])])) {
              $form["field_nomenklatura"]["und"]["#default_value"] = [array_key_first($options)];
            }
          }
        }
      } else {
        // убрать для менеджера причины Клиента
        unset($form["field_query_reason"]["und"]["#options"][553]);
      }
    }

    $form['#attributes']['class'] = ['query-form'];

    if (empty($form_state['data'])) $form_state['data'] = [];

    if (empty($form_state["query"]->is_new)) {
      $query_wr = entity_metadata_wrapper('query', $form_state["query"]);
      $form_state['data']['query']['id'] = $query_wr->getIdentifier();
      $form_state['data']['query']['volume'] = $query_wr->field_qty->value();
    }

    $month_start = empty($form_state['data']['month_start']) ? 0 : $form_state['data']['month_start'];

    // текущую Загрузку извлекаем:
    // - для новой Заявки из предыдущей Заявки с заданной Загрузкой (если есть)
    // - для редактируемой - из неё самой
    $load_query_id = null;
    if (!empty($form_state['data']['query']['id'])) {
      $load_query_id = $form_state['data']['query']['id'];
    } elseif(!empty($form_state['data']['source_query']['id'])) {
      $load_query_id = $form_state['data']['source_query']['id'];
    }
    if ($load_query_id) {
      $load_query_wr = entity_metadata_wrapper('query', $load_query_id);
      if ($load_query_id && $load_query_wr->value()) {
        $nom_tid = null;
        if ($load_query_wr->field_nomenklatura->value()) {
          $nom_tid = $load_query_wr->field_nomenklatura->tid->value();
        } else {
          $nom_tid = empty($form["field_nomenklatura"]["und"]["#default_value"][0]) ? array_key_first($form["field_nomenklatura"]["und"]["#options"]) : $form["field_nomenklatura"]["und"]["#default_value"][0];
        }

        if ($form["field_query_type"]["und"]["#default_value"][0] != 'cancel') {
          if ($nom_tid) {
            // получить Установки, уже выбранные в данной форме
            $produce_units = empty($form_state['data']['produce_units']) ? [] : $form_state['data']['produce_units'];

            // получить Установки и их Загрузку из Запроса
            $load_produce_units = query_get_produce_units_from_query($load_query_wr->value());
            foreach($load_produce_units as $pu_tid => $pu_item) {
              if (empty($produce_units[$pu_tid])) $produce_units[$pu_tid] = $pu_item;
            }

            $form_state['data']['produce_units'] = $produce_units;
          }
        }
      }
    }


    // добавить в форму выбор дат ------------------------------------------------------------------------------------
    $produce_units = empty($form_state['data']['produce_units']) ? [] : $form_state['data']['produce_units'];

    $form['produce_units'] = [
      '#type' => 'container',
      '#attributes' => [
        'id' => ['produce-units-wrapper'],
        'class' => ['produce-units-wrapper'],
      ],
      '#weight' => 4,
    ];
    if ($produce_units) {
      foreach ($produce_units as $pu_tid => $produce_unit) {
        $produce_unit_load = query_get_produce_unit_load($pu_tid, $month_start, null, $load_query_id);

        $form['produce_units']['pu_' . $pu_tid] = [
          '#type' => 'container',
          '#attributes' => ['class' => ['produce-unit']],
          '#weight' => 3,
        ];
        $form['produce_units']['pu_' . $pu_tid]['name'] = [
          '#type' => 'item',
          '#title' => 'Установка',
          '#markup' => '<h3>' . $produce_unit['name'] . '</h3>',
          '#wrapper_attributes' => ['class' => ['produce-unit-name']],
        ];

        $form['produce_units']['pu_' . $pu_tid]['selection'] = [
          '#type' => 'container',
          '#attributes' => ['class' => ['produce-unit-dates', 'form-item']],
        ];
        $form['produce_units']['pu_' . $pu_tid]['selection']['title'] = [
          '#markup' => '<label class="control-label">Даты</label>',
        ];

        $form['produce_units']['pu_' . $pu_tid]['selection']['dates'] = [
          '#type' => 'container',
          '#attributes' => ['class' => ['form-checkboxes']],
          '#suffix' => '<div class="produce-unit-legenda"><span></span>- установка свободна <span class="unavailable"></span>- установка недоступна <span class="loaded"></span>- установка занята <span class="selected"></span>- выбранные даты</div>',
        ];

        // цикл по количеству дней в месяце
        for ($i = 1; $i <= date("t", $month_start); $i++) {

          $today_start = gmmktime(0, 0, 0, date('n'), date('j'), date('Y'));
          $day_start = $month_start + ($i - 1) * 60 * 60 * 24;

          // для текущей Номенклатуры занятость не выводим (в случае заполнения корректирующей Заявки)
//                  $produce_unit_is_busy = !empty($produce_unit_load[$day_start]) && $produce_unit_load[$day_start]['nomenklatura']['tid'] != $nom_tid;
//                  $produce_unit_has_current_load = (int)!empty($current_load[$pu_tid][$day_start]);
          $produce_unit_is_busy = !empty($produce_unit_load[$day_start]['is_busy']);
          $produce_unit_has_current_load = (int)!empty($produce_unit_load[$day_start]['is_current_load']);
          $produce_unit_is_unavailable = (int)!empty($produce_unit_load[$day_start]['is_unavailable']);
          $classes = empty($produce_unit_load[$day_start]['classes']) ? [] : $produce_unit_load[$day_start]['classes'];
          // дата недоступна для выбора в корректирующей Заявке для Клиента до сегодня и ещё спустя три дня
//                  $produce_unit_is_unavailable = !user_has_role(ROLE_ADMIN)
//                    && !user_has_role(ROLE_MANAGER)
//                    && ($day_start < $today_start + 3 * 24 * 60 * 60)
//                    && in_array($load_query_wr->field_query_type->value(), ['main', 'correction']); // данные могут быть получены из начальной и корректирующей

          // вывести подсказку при наведении с выходом продукции в этот день
//                  $classes = [];
//                  if ($produce_unit_is_busy && !$produce_unit_has_current_load) $classes[] = 'loaded';
//                  if ($produce_unit_has_current_load) $classes[] = 'selected';
//                  if ($produce_unit_is_unavailable && !$produce_unit_has_current_load) $classes[] = 'unavailable';
          $tooltip = empty($produce_unit_load[$day_start]['is_current_load']) ? '' : ' data-toggle="tooltip" data-placement="top" title="' . $produce_unit_load[$day_start]['output'] . '"';

          // при создании заявки даты можно выбирать, при редактировании нет
          if (!empty($form_state['query']->is_new)) {
            $form['produce_units']['pu_' . $pu_tid]['selection']['dates']['check_' . $pu_tid . '_' . $i] = [
              '#type' => 'checkbox',
              '#title' => '<span>' . $i . '</span>',
              '#disabled' => ($produce_unit_is_busy && !$produce_unit_has_current_load) || ($produce_unit_is_unavailable && !user_has_role(ROLE_MANAGER)),
              '#default_value' => $produce_unit_has_current_load,
              '#attributes' => ['class' => $classes],
            ];
            if ($tooltip) {
              $form['produce_units']['pu_' . $pu_tid]['selection']['dates']['check_' . $pu_tid . '_' . $i]['#wrapper_attributes'] = [
                'data-toggle' => 'tooltip',
                'data-placement' => 'top',
                'title' => empty($produce_unit_load[$day_start]['is_current_load']) ? '' : $produce_unit_load[$day_start]['output'],
              ];
            }
          } else {
            $form['produce_units']['pu_' . $pu_tid]['selection']['dates']['check_' . $pu_tid . '_' . $i]['#markup'] = '<span class="c-box ' . implode(' ', $classes) . '"' . $tooltip . '>' . $i . '</span>';
          }
        }

        // производительность
        $form['produce_units']['pu_' . $pu_tid]['performance_' . $pu_tid] = [
          '#type' => 'textfield',
          '#title' => 'Производительность',
          '#required' => true,
          '#access' => user_has_role(ROLE_MANAGER),
          '#default_value' => empty($produce_unit['performance']) ? 0 : $produce_unit['performance'],
          '#wrapper_attributes' => ['class' => ['produce-unit-performance']],
        ];

      }
    } else {
      // Установки не найдены
      $form['produce_units']['message'] = [
        '#markup' => '<div class="alert alert-warning" role="alert">Установки не заданы</div>',
        '#weight' => 3,
      ];
    }

    // для менеджеров вывести добавление установки
    if (user_has_role(ROLE_MANAGER)) {
      $pu_options = [];
      foreach ($produce_units_list as $punit) {
        if (empty($form_state['data']['produce_units'][$punit->tid]))
          $pu_options[$punit->tid] = $punit->name;
      }
      // элементы формы
      $form['produce_units']["pu_add"] = [
        '#type' => 'container',
        '#attributes' => ['class' => ['produce-unit-add-wrapper']],
        '#weight' => 4,
      ];
      $form['produce_units']["pu_add"]['pu_select'] = [
        '#type' => 'select',
        '#title' => 'Установка',
        '#options' => $pu_options,
      ];
      $form['produce_units']["pu_add"]['pu_submit'] = [
        '#type' => 'button',
        '#value' => 'Добавить',
        '#name' => 'pu_add',
        '#limit_validation_errors' => [['pu_select']],
        '#ajax' => array(
          'callback' => 'query_form_produce_unit_add_ajax_callback',
          'wrapper' => $form['#id'],
        ),
      ];
    }


    $form["field_comment"]["und"][0]["value"]["#required"] = !user_has_role(ROLE_MANAGER);

    $form["#validate"][] = 'query_form_eck__entity__form_query_query_validate';
    $form["#submit"][] = 'query_form_eck__entity__form_query_query_submit';
    $form["actions"]["submit"]["#name"] = 'eck_submit';
  }

  // дополнительный обработчик сабмита
  if (in_array($form_id, ['eck__entity__form_add_query_query', 'eck__entity__form_edit_query_query', 'eck__entity__delete_form'])) {
    $form["#submit"][] = 'query_form_redirect_submit';
  }
}

function query_form_produce_unit_add_ajax_callback($form, &$form_state)
{
  return $form;
}

/**
 * query_form_eck__entity__form validate callback
 */
function query_form_eck__entity__form_query_query_validate(&$form, &$form_state)
{
  if ($form_state["triggering_element"]["#name"] == 'eck_submit') {
    // обычно месяц задан и не доступен для смены
    $month_value = $form_state["values"]["field_month"]["und"][0]["value"];
    $month_start = gmmktime(0, 0, 0, date('n', $month_value), 1, date('Y', $month_value));
    $form_state["values"]["field_month"]["und"][0]["value"] = $month_start;
    $form_state["values"]["field_month"]["und"][0]["value2"] = $month_start;

    // когда менеджер сохраняет заявку со статусом Утверждено И требуется согласование, поменять статус клиента на На рассмотрении
    if ($form_state["values"]["field_query_status_manager"]["und"][0]["value"] == 'approved') {
      if (!empty($form_state["query"]->is_new) && $form_state["values"]["field_query_client_approve"]["und"][0]["value"]) {
        $form_state["values"]["field_query_status_client"]["und"][0]["value"] = 'processing';
      } else {
        $form_state["values"]["field_query_status_client"]["und"][0]["value"] = 'approved';
      }
    }

    // если заданы даты для Установки, сохранить их и проверить наличие Производительности
    if (isset($form_state["data"]["produce_units"])) {
      $volume = $form_state["values"]["field_qty"]["und"][0]["value"];
      foreach ($form_state["data"]["produce_units"] as $produce_unit_tid => $produce_unit) {
        $load = [];
        $performance = $form_state['values']['performance_' . $produce_unit_tid] ? $form_state['values']['performance_' . $produce_unit_tid] : 0;
        $form_state["data"]["produce_units"][$produce_unit_tid]['performance'] = $performance;
        if (!$performance) {
          form_set_error('performance_' . $produce_unit_tid, 'Не задана производительность установки');
          return false;
        }
        $today_start = gmmktime(0, 0, 0, date('n'), date('j'), date('Y'));

        // посчитать уже произведённое количество
        $output_produced = 0;
        if (!empty($form_state['data']['source_query']['load'])) {
          foreach ($form_state['data']['source_query']['load'] as $load_date => $load_output) {
            if ($load_date <= $today_start) {
              $output_produced += $load_output;
            }
          }
        }
        if ($volume < $output_produced) {
          form_set_error('field_qty', 'Заданное количество меньше уже произведённого.');
          return false;
        }

        // Сформировать Загрузку для выбранной установки.
        // Загрузку с выходом 0 (когда дат задано больше чем хватает Количества) тоже сохраняем,
        // нужна для сравнения старой и заданной Загрузок.
        // Исключим загрузку с 0 на этапе сохранения.
        // Сохранить размеры значений выхода продукции в уже произведённой Загрузке.
        $output_total = 0;
        foreach ($form_state['values'] as $key => $value) {
          if (strpos($key, 'check_' . $produce_unit_tid) === 0 && $value === 1) {
            $day = str_replace('check_' . $produce_unit_tid . '_', '', $key);
            $day_start = $month_start + ($day - 1) * 60 * 60 * 24;
            // вычислить выход на день (Производительность или Остаток)
            // если Загрузка этого дня уже произведена, взять выход из неё (в последнем дне может быть меньше)
            if ($day_start <= $today_start                                                            // в день Заявки Загрузка считается произведённой
              && !empty($form_state['data']['source_query']['load'][$day_start])) {
              $output = $form_state['data']['source_query']['load'][$day_start];
            } else {
              $output = $volume - $output_total >= $performance ? $performance : $volume - $output_total;
            }
            if ($output < 0) $output = 0;
            $output_total += $output;

            $load[] = [
              'field_produce_unit' => $produce_unit_tid,
              'field_produce_date' => $day_start,
              'field_produce_output' => $output,
            ];
          }
        }
        $form_state["data"]["produce_units"][$produce_unit_tid]['load'] = $load;

        if ($output_total < $volume) {
          form_set_error('field_qty', 'Выбрано дат меньше, чем необходимо для заданного количества производимого продукта.');
          return false;
        }
      }

      // если количество дней в Загрузке изменилось, а Кол-во нет - вывести ошибку
      if (!empty($form_state['data']['source_query']['load'])) {
        $load_old = $form_state['data']['source_query']['load'];
        $volume_old = $form_state['data']['source_query']['volume'];
        if ($volume == $volume_old
          && count($load) > count($load_old)) {
          form_set_error('field_qty', 'При выборе дополнительных дат производства необходимо увеличить количество продукта.');
          return false;
        }
      }
    }
  }
}

/**
 * query_form_eck__entity__form submi callback
 */
function query_form_eck__entity__form_query_query_submit(&$form, &$form_state)
{
  // сохранить Загрузку
  if (!empty($form_state["values"]["entity"]->id) && !empty($form_state["data"]["produce_units"])) {
    foreach($form_state["data"]["produce_units"] as $puid => $produce_unit) {
      if (!empty($produce_unit['load'])) {
        query_query_load_update($form_state["values"]["entity"]->id, $produce_unit['load']);
      }
    }
  }

  // статус старой Заявки изменить на Отказано
  if (!empty($form_state["data"]["last_query"]['id'])) {
    $last_query_wr = entity_metadata_wrapper('query', $form_state['data']['last_query']['id']);
    if ($last_query_wr->field_query_status_manager->value() == 'processing') {
      $last_query_wr->field_query_status_manager = 'deny';
      $last_query_wr->save();
    }
    if ($last_query_wr->field_query_status_client->value() == 'processing') {
      $last_query_wr->field_query_status_client = 'deny';
      $last_query_wr->save();
    }
  }
}

function query_form_redirect_submit(&$form, &$form_state)
{
  if (!user_has_role(ROLE_ADMIN)) {
    $form_state['redirect'] = user_has_role(ROLE_MANAGER) ? 'manage' : 'queries';
  }
}

/**
 * Implements hook_entity_insert().
 * @param $entity
 * @param $type
 */
function query_entity_insert($entity, $type)
{
  if ($type == 'query' && $entity->bundle() == 'query' && strpos($_GET["q"], 'import') === false) {
    // отправка уведомлений при создании новой Заявки
    $changed_by = user_has_role(ROLE_MANAGER) ? 'manager' : 'client';
    $query_wr = entity_metadata_wrapper('query', $entity);
    $params = [
      'qid' => $query_wr->getIdentifier(),
      'month' => date('F', $query_wr->field_month->value()),
      'product' => $query_wr->field_nomenklatura->name->value(),
      'product_owner_account' => $query_wr->field_nomenklatura->field_user->value(),
      'status_client' => $query_wr->field_query_status_client->label(),
      'status_manager' => $query_wr->field_query_status_manager->label(),
      'client_approve' => $query_wr->field_query_client_approve->value(),
      'type' => $query_wr->field_query_type->value(),
      'comment' => $query_wr->field_comment->value(),
    ];
    if ($query_wr->field_query_reason->value()) {
      $params['reason'] = $query_wr->field_query_reason->name->value();
    }
    if ($changed_by == 'client') {
      if ($managers = query_get_managers_to_notify()) {
        foreach ($managers as $manager) {
          if ($query_wr->field_query_type->value() == 'correction') {
            drupal_mail('mailer', 'manager_notify_query_correction_new', $manager->mail, user_preferred_language($manager), $params);
          }
          if ($query_wr->field_query_type->value() == 'cancel') {
            drupal_mail('mailer', 'manager_notify_query_cancel_new', $manager->mail, user_preferred_language($manager), $params);
          }
        }
      }
    } else {
      if ($query_wr->field_query_type->value() == 'correction') {
        drupal_mail('mailer', 'client_notify_query_correction_new', $params['product_owner_account']->mail, user_preferred_language($params['product_owner_account']), $params);
      }
      if ($query_wr->field_query_type->value() == 'cancel') {
        drupal_mail('mailer', 'client_notify_query_cancel_new', $params['product_owner_account']->mail, user_preferred_language($params['product_owner_account']), $params);
      }
    }
  }
}

/**
 * Implements hook_entity_update().
 * @param $entity
 * @param $type
 */
function query_entity_update($entity, $type)
{
  if ($type == 'query' && $entity->bundle() == 'query' && strpos($_GET["q"], 'import') === false) {
    // отправка уведомлений при наличии изменений в Заявке
    $changed_by = user_has_role(ROLE_MANAGER) ? 'manager' : 'client';
    $query_wr = entity_metadata_wrapper('query', $entity);
    $params = [
      'qid' => $query_wr->getIdentifier(),
      'month' => date('F', $query_wr->field_month->value()),
      'product' => $query_wr->field_nomenklatura->name->value(),
      'product_owner_account' => $query_wr->field_nomenklatura->field_user->value(),
      'status_client' => $query_wr->field_query_status_client->label(),
      'status_manager' => $query_wr->field_query_status_manager->label(),
      'client_approve' => $query_wr->field_query_client_approve->value(),
      'type' => $query_wr->field_query_type->value(),
      'comment' => $query_wr->field_comment->value(),
    ];
    if ($query_wr->field_query_reason->value()) {
      $params['reason'] = $query_wr->field_query_reason->name->value();
    }

    if ($changed_by == 'client') {
      if ($entity->original->field_query_status_client["und"][0]["value"] != $entity->field_query_status_client["und"][0]["value"]) {
        // отправить письма менеджерам, за исключением, когда клиент согласует весь план разом
        if ($entity->field_query_type["und"][0]["value"] != 'main' || $entity->field_query_status_client["und"][0]["value"] != 'approved') {
          if ($managers = query_get_managers_to_notify()) {
            foreach ($managers as $manager) {
              drupal_mail('mailer', 'manager_notify_query_handling', $manager->mail, user_preferred_language($manager), $params);
            }
          }
        }
      }
    } else {
      drupal_mail('mailer', 'client_notify_query_handling', $params['product_owner_account']->mail, user_preferred_language($params['product_owner_account']), $params);
    }
  }
}


function query_get_managers_to_notify()
{
  $dbr = db_select('users', 'u');
  $dbr->innerJoin('users_roles', 'ur', 'ur.uid = u.uid');
  $dbr->condition('ur.rid', ROLE_MANAGER);
  $dbr->innerJoin('field_data_field_notify_query', 'nq', 'nq.entity_id = u.uid');
  $dbr->condition('nq.field_notify_query_value', 1);
  $dbr->addField('u', 'uid');
  return ($result = $dbr->execute()->fetchCol()) ? user_load_multiple($result, []) : false;
}

/**
 * Implements hook_views_api().
 */
function query_views_api()
{
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'query') . '/views',
  );
}

/**
 * Implements hook_views_data_alter().
 */
function query_views_data_alter(&$data)
{
  $data['eck_query']['produce_units_form'] = array(
    'field' => array(
      'title' => t('Produce units'),
      'help' => t('View and select produce units.'),
      'handler' => 'query_handler_field_produce_units_form',
    ),
  );
  $data['eck_query']['actions'] = array(
    'field' => array(
      'title' => t('Actions'),
      'help' => t('Conditional actions'),
      'handler' => 'query_handler_field_actions',
    ),
  );
  $data['eck_query']['comment'] = array(
    'field' => array(
      'title' => t('Formatted Comment'),
      'handler' => 'query_handler_field_comment',
    ),
  );
  $data['taxonomy_term_data']['produce_unit_load'] = array(
    'field' => array(
      'title' => t('Produce Unit Load'),
      'help' => t('Produce Unit Load'),
      'handler' => 'query_handler_field_produce_unit_load',
    ),
  );
}

/**
 * Implements hook_views_pre_render().
 */
function query_views_pre_render(&$view)
{
  if ($view->name == 'queries' && $view->current_display == 'page_1') {
    if (!empty($view->filter["field_month_value"]->value["value"])) {
      $month_start = gmmktime(0, 0, 0, explode('-', $view->filter["field_month_value"]->value["value"])[1], 1, explode('-', $view->filter["field_month_value"]->value["value"])[0]);

      // вывести кнопку Согласовать весь план, если
      // - не наступило 26 число
      // - есть несогласованные начальные Заявки
      $today_start = gmmktime(0, 0, 0, date('n'), date('j'), date('Y'));
      $deadline_start = gmmktime(0, 0, 0, date('n', $month_start)-1, 26, date('Y', $month_start));

      $dbr = db_select('eck_query', 'q');
      $dbr->addField('q', 'id');
      $dbr->innerJoin('field_data_field_nomenklatura', 'fn', 'fn.entity_id = q.id');
      $dbr->innerJoin('taxonomy_term_data', 'n', 'n.tid = fn.field_nomenklatura_target_id');
      $dbr->innerJoin('field_data_field_user', 'fu', 'fu.entity_id = n.tid');
      $dbr->condition('fu.field_user_target_id', $GLOBALS['user']->uid);
      $dbr->innerJoin('field_data_field_query_status_client', 'fsc', 'fsc.entity_id = q.id');
      $dbr->condition('fsc.field_query_status_client_value', 'processing');      $dbr->innerJoin('field_data_field_query_status_client', 'fsc', 'fsc.entity_id = q.id');
      $dbr->innerJoin('field_data_field_query_status_manager', 'fsm', 'fsm.entity_id = q.id');
      $dbr->condition('fsm.field_query_status_manager_value', 'approved');
      $dbr->innerJoin('field_data_field_query_type', 'fqt', 'fqt.entity_id = q.id');
      $dbr->condition('fqt.field_query_type_value', 'main');
      $has_queries = $dbr->execute()->fetchCol();

//      if (count($has_queries) && $today_start < $deadline_start) {
      if (count($has_queries)) {
        $view->attachment_before =  '<a href="/query/plan/' . $month_start . '/approve" class="btn btn-success">Согласовать весь план</a>' .
                                    '<p class="text-muted">Необходимо согласовать план не позднее 25 числа месяца, предшествующего плановому.</p>';
      }
    }

    // добавить кнопку Новая заявка (Торговый Дом)
    if (in_array($GLOBALS['user']->uid,[91, 80])) {
      $view->attachment_before = (empty($view->attachment_before) ? '' : $view->attachment_before) . '<a href="/admin/structure/entity-type/query/query/add" class="btn btn-primary">Новая заявка</a>';
    }
  }

  // дополнительная сортировка по важности Заявки
  if (in_array($view->name, ['queries', 'manager_queries']) && $view->current_display == 'page_1') {
    $result = $view->result;
    for ($i = count($view->result)-1;  $i >= 0; $i--) {
      $vr_item = $view->result[$i];
      if (($view->name == 'manager_queries' && $vr_item->field_field_query_status_manager[0]["raw"]["value"] == 'processing')
        || ($view->name == 'queries' && $vr_item->field_field_query_status_client[0]["raw"]["value"] == 'processing')) {
        $index = -1;
        foreach($result as $i2 => $r_item) {
          if ($r_item->id == $vr_item->id) {
            $index = $i2;
          }
        }
        if ($index != -1) {
          $item = array_splice($result, $index, 1);
          array_unshift($result, $item[0]);
        }
      }
    }
    $view->result = $result;
  }

  if ($view->name == 'produced_nomenklatura' && $view->current_display == 'page') {
    // определяем последнюю Заявку по Номенклатуре
    $nom_result_arr = [];
    foreach($view->result as $result_item) {
      if (empty($nom_result_arr[$result_item->tid]) || $nom_result_arr[$result_item->tid]->field_nomenklatura_taxonomy_term_data_created < $result_item->field_nomenklatura_taxonomy_term_data_created) {
        $nom_result_arr[$result_item->tid] = $result_item;
      }
    }

    // исключаем ненужные из вывода
    $result = [];
    foreach($view->result as $result_item) {
      if (isset($nom_result_arr[$result_item->tid]) && !empty($nom_result_arr[$result_item->tid]->eck_load_field_data_field_load__field_data_field_produce_uni)) {
        $result[] = $result_item;
      }
    }
    $view->result = $result;
  }
}

/**
 * hook_preprocess_views_view_unformatted()
 */
function query_preprocess_views_view_unformatted(&$vars)
{
  // добавить класс строке основного Запроса, если есть корректирующий
  if (in_array($vars['view']->name, ['queries', 'manager_queries']) && $vars['view']->current_display == 'page_1') {
    foreach ($vars["classes"] as $key => $value) {
      $status_manager = $vars["view"]->result[$key]->field_field_query_status_manager[0]["raw"]["value"];
      $status_client = $vars["view"]->result[$key]->field_field_query_status_client[0]["raw"]["value"];

      // есть ли Корректировки
      $efquery = new EntityFieldQuery();
      $result = $efquery
        ->entityCondition('entity_type', 'query')
        ->propertyCondition('created', $vars["view"]->result[$key]->eck_query_created, '>')
        ->fieldCondition('field_month', 'value', $vars["view"]->result[$key]->field_field_month[0]["raw"]["value"])
        ->fieldCondition('field_nomenklatura', 'target_id', $vars["view"]->result[$key]->field_field_nomenklatura[0]["raw"]["target_id"])
        ->execute();
      if ($result) {
        $queries = entity_load('query', array_keys($result['query']));
        krsort($queries);
        $last_query = current($queries);
        if ($last_query->field_query_type["und"][0]["value"] == 'cancel'
          && $last_query->field_query_status_client["und"][0]["value"] == 'approved'
          && $last_query->field_query_status_manager["und"][0]["value"] == 'approved') {
          $vars["classes_array"][$key] .= ' cancelled';
        } else {
          if (query_check_query_produce_finished($vars["view"]->result[$key]->id)
            && $status_manager == 'approved'
            && $status_client == 'approved') {
            $vars["classes_array"][$key] .= ' produced';
          } else {
            $vars["classes_array"][$key] .= ' changed';
          }
        }
      } else {
        // если дата конца производства наступила - наложить штамп "ВЫПОЛНЕНО"
        if (query_check_query_produce_finished($vars["view"]->result[$key]->id)
          && $status_manager == 'approved'
          && $status_client == 'approved') {
            $vars["classes_array"][$key] .= ' produced';
        }

        // утверждённая заявка
        if ($status_manager == 'approved'
        && $status_client == 'approved') {
          $vars["classes_array"][$key] .= ' approved';
        }
      }

      if (user_has_role(ROLE_MANAGER)) {
        if ($status_manager == 'processing') {
          $vars["classes_array"][$key] .= ' attention';
        }
        if ($status_client == 'processing') {
          $vars["classes_array"][$key] .= ' processing';
        }
      } else {
        if ($status_client == 'processing') {
          $vars["classes_array"][$key] .= ' attention';
        }
        if ($status_manager == 'processing') {
          $vars["classes_array"][$key] .= ' processing';
        }
      }

      if (empty($vars["view"]->result[$key]->field_data_field_load_field_load_target_id)) {
        $vars["classes_array"][$key] .= ' no-load';
      }
    }
  }

  if ($vars['view']->name == 'produce_units_load' && $vars['view']->current_display == 'page') {
    $vars["view"]->attachment_before = '<div class="produce-unit-legenda"><span></span>- установка свободна <span class="service"></span>- установка на обслуживании <span class="loaded"></span>- установка загружена</div>';
  }
}

/**
 * hook_preprocess_views_view_field()
 */
function query_preprocess_views_view_field(&$vars)
{
  if ($vars["view"]->name == 'queries' && isset($vars["field"]->field_info["field_name"])) {
    if ($vars["field"]->field_info["field_name"] == 'field_nomenklatura') {
      $name = [];
      $artikul = empty($vars["row"]->field_field_oc_artikul_davalec[0]["raw"]["value"]) ? '' : $vars["row"]->field_field_oc_artikul_davalec[0]["raw"]["value"];
      if ($artikul) $name[] = $artikul;
      $title = empty($vars["row"]->field_field_oc_name_davalec[0]["raw"]["value"]) ? $vars["output"] : $vars["row"]->field_field_oc_name_davalec[0]["raw"]["value"];
      if ($title) $name[] = $title;
      if ($name) {
        $vars["output"] = implode(' ', $name);
      }
    }

    if ($vars["field"]->field_info["field_name"] == 'field_query_status_client') {
      // если Заявка без согласования с клиентом, то есго статус помениять с Согласовано на Уведомление
      if ($vars["row"]->field_field_query_status_client[0]["raw"]["value"] == 'approved'
        && isset($vars["row"]->field_field_query_client_approve[0]["raw"]["value"]) && $vars["row"]->field_field_query_client_approve[0]["raw"]["value"] == 0
       ) {
        $vars["output"] = 'Уведомление';
      }
    }
  }

  if ($vars["view"]->name == 'produced_nomenklatura') {
    if ($vars["field"]->field_alias == 'taxonomy_term_data_name') {
      $name = [];
      $artikul = empty($vars["row"]->field_field_oc_artikul_davalec[0]["raw"]["value"]) ? '' : $vars["row"]->field_field_oc_artikul_davalec[0]["raw"]["value"];
      if ($artikul) $name[] = $artikul;
      $title = empty($vars["row"]->field_field_oc_name_davalec[0]["raw"]["value"]) ? $vars["output"] : $vars["row"]->field_field_oc_name_davalec[0]["raw"]["value"];
      if ($title) $name[] = $title;
      if ($name) {
        $vars["output"] = implode(' ', $name);
      }

    }
    if (isset($vars["field"]->field_info["field_name"]) && $vars["field"]->field_info["field_name"] == 'field_produce_output') {
      $vars["output"] = number_format($vars["field"]->original_value, 0, ',', ' ');
    }
  }
}


/**
 * обновить Загрузку в Запросе
 */
function query_query_load_update($query_id, $load_array)
{
  $query_wr = entity_metadata_wrapper('query', $query_id);
  if ($query_wr->value()) {
    // удалить старые записи
    $ids = [];
    foreach ($query_wr->field_load->getIterator() as $field_load_wr) {
      $ids[] = $field_load_wr->getIdentifier();
    }
    entity_delete_multiple('load', $ids);
    $query_wr->field_load->set(null);

    // создать новые
    foreach ($load_array as $load_item) {
      if ($load_item['field_produce_output']) {
        $load = entity_create('load', ['type' => 'load']);
        $load_wr = entity_metadata_wrapper('load', $load);
        $load_wr->field_produce_unit = $load_item['field_produce_unit'];
        $load_wr->field_produce_date = $load_item['field_produce_date'];
        $load_wr->field_produce_output = $load_item['field_produce_output'];
        $load_wr->save();
        $query_wr->field_load[] = $load_wr->getIdentifier();
      }
    }

    $query_wr->save();
  }
}

function query_get_produce_unit_by_1cID($produce_unit_1cID)
{
  $vid = taxonomy_vocabulary_machine_name_load('produce_units')->vid;
  $query = new EntityFieldQuery();
  $terms = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $vid)
    ->fieldCondition('field_oc_produce_unit_id', 'value', $produce_unit_1cID)
    ->execute();

  if ($terms) {
    $entities = entity_load('taxonomy_term', [current($terms['taxonomy_term'])->tid]);
  }
  return empty($entities) ? false: current($entities);
}

function query_get_nomenklatura_by_artikul($articul)
{
  $nom_vid = taxonomy_vocabulary_machine_name_load('nomenklatura')->vid;
  $query = new EntityFieldQuery();
  $terms = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $nom_vid)
    ->fieldCondition('field_oc_artikul', 'value', $articul)
    ->execute();
  if ($terms) {
    $entities = entity_load('taxonomy_term', [current($terms['taxonomy_term'])->tid]);
  }
  return empty($entities) ? false: current($entities);
}

/**
 * query_get_product_unit_performance_by_nomenklatura
 * @return array
 */
//function query_get_product_unit_performance_by_nomenklatura($pu_tid, $nom_tid)
//{
//  $output = [];
//  // todo заменить тестовые данные
////  if ($pu_tid == 93 && $nom_tid == 301) {
//    $output = [
//      'amount' => 10000,
//      'unit' => 'л',
//    ];
////  }
//  return $output;
//}

/**
 * get_produce_units
 */
function query_get_produce_units_list()
{
  $vid = taxonomy_vocabulary_machine_name_load('produce_units')->vid;
  $query = new EntityFieldQuery();
  $terms = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $vid)
    ->execute();

  if ($terms) {
    $entities = entity_load('taxonomy_term', array_keys($terms['taxonomy_term']));
  }
  return empty($entities) ? false: $entities;
}

/**
 * получить Установки из Запроса
 * @param $query
 */
function query_get_produce_units_from_query($query)
{
  $produce_units = [];
  $query_wr = entity_metadata_wrapper('query', $query);
  foreach ($query_wr->field_load->getIterator() as $load_wr) {
    if ($load_wr->value()) {
      $pu_tid = $load_wr->field_produce_unit->tid->value();
      if (empty($produce_units[$pu_tid])) {
        $produce_units[$pu_tid] = [
          'tid' => $pu_tid,
          'name' => $load_wr->field_produce_unit->name->value(),
          'performance' => 0,
        ];
      }

      // определить максимальную производительность Запросе
      if ($produce_units[$pu_tid]['performance'] < $load_wr->field_produce_output->value()) {
        $produce_units[$pu_tid]['performance'] = $load_wr->field_produce_output->value();
      }
    }
  }
  return $produce_units;
}


/**
 * get_produce_unit_load
 */
function query_get_produce_unit_load($produce_unit_tid, $month_start, $date = null, $current_query = null)
{
  // todo добавить учёт даты в месяце, до которой нужно вернуть загрузку,
  // todo так как:
  // todo 1. в списке каждая следующая заявка должна отображать утверждённую занятость в зависимости от предыдущих
  // todo 2. если запрошенные даты двух заявок пересекаются, то нужно выделить цветом для второй, что установка уже занята
  // todo    и менеджеру нужно перенести запрос на свободные даты

  // вернуть список периодов загрузки заданной установки на заданный месяц
  // учитывать нужно только утверждённые заявки
  // Загрузку нужно возвращать с привязкой к Номенклатуре,
  //   например,
  //   чтобы в корректирующих Заявке не выводить Загрузку из основной Заявки,
  //   т.к нужна возможность распределить её на эти даты снова
  $load_array = [];

  $ids = [];
  // начальные Заявки месяца
  $efquery = new EntityFieldQuery();
  $result_main = $efquery
    ->entityCondition('entity_type', 'query')
    ->fieldCondition('field_month', 'value', $month_start)
    ->fieldCondition('field_query_status_client', 'value', ['approved', 'processing'], 'IN')
    ->fieldCondition('field_query_status_manager', 'value', 'approved')
    ->fieldCondition('field_query_type', 'value', 'main')
    ->execute();
  if ($result_main) {
    $ids = array_keys($result_main['query']);
  }

  // утверждённые Корректировки и Отмены
  $efquery = new EntityFieldQuery();
  $efquery
    ->entityCondition('entity_type', 'query')
    ->fieldCondition('field_query_type', 'value', 'main', '!=')
    ->fieldCondition('field_month', 'value', $month_start)
    ->fieldCondition('field_query_status_client', 'value', 'approved')
    ->fieldCondition('field_query_status_manager', 'value', 'approved');
  if ($date) {
    $efquery->propertyCondition('created',  $date, '<');
  }
  if ($result = $efquery->execute()) {
    $ids = array_merge($ids, array_keys($result['query']));
  }

  // добавить id текущей Загрузки
  if ($current_query) {
    $current_query_wr = entity_metadata_wrapper('query', $current_query);
    if ($current_query_wr->value()) {
      $ids = array_merge($ids, [$current_query_wr->getIdentifier()]);
    } else {
      $current_query = null;
    }
  }

  if ($ids) {
    $load_nomenklatura = [];
    $queries = entity_load('query', $ids);

    // исключить неактуальные Заявки (для которых есть корректировки)
    // (оставляем последнюю утверждённую для Номенклатуры)
    // Заявка на отмену не должна содержать загрузку, так как отсутствие Загрузки и будет отменой
    // массив Номенклатура - Заявки
    foreach ($queries as $query) {
      $query_wr = entity_metadata_wrapper('query', $query);
      $nom_tid = $query_wr->field_nomenklatura->tid->value();
      if (empty($nom_query[$nom_tid]['created']) || $nom_query[$nom_tid]['created'] < $query_wr->created->value()) {
        $nom_query[$nom_tid] = [
          'query_id' => $query_wr->getIdentifier(),
          'created' => $query_wr->created->value(),
        ];
      }
    }

    // массив Загрузка - Номенклатура
    foreach ($queries as $query) {
      $query_wr = entity_metadata_wrapper('query', $query);
      $nom_tid = $query_wr->field_nomenklatura->tid->value();
      if ($nom_query[$nom_tid]['query_id'] == $query->id) {
        foreach ($query_wr->field_load->getIterator() as $load_wr) {
          $load_nomenklatura[$load_wr->getIdentifier()] = [
            'tid' => $nom_tid,
            'name' => $query_wr->field_nomenklatura->name->value(),
            'client_id' => $query_wr->field_nomenklatura->field_user->uid->value(),
          ];
        }
      }
    }

    // пустая Загрузка (ремонт, ТО)
    $next_month_start = gmmktime(0,0,0, date('n', $month_start)+1, date('j', $month_start), date('Y', $month_start));

    $efquery = new EntityFieldQuery();
    $result = $efquery
      ->entityCondition('entity_type', 'load')
      ->fieldCondition('field_produce_date', 'value', $month_start, '>=')
      ->fieldCondition('field_produce_date', 'value', $next_month_start, '<')
      ->fieldCondition('field_produce_output', 'value', 0)
      ->execute();
    if ($result) {
      $load = entity_load('load', array_keys($result['load']));
      foreach ($load as $load_item) {
        if ($load_item->field_produce_unit["und"][0]["tid"] == $produce_unit_tid) {
          $load_array[$load_item->field_produce_date["und"][0]["value"]] = [
            'output' => 0,
            'nomenklatura' => ['tid' => 0, 'client_id' => 0, 'name' => 'Технические работы'],
          ];
        }
      }
    }


    if ($load_nomenklatura) {
      $load = entity_load('load', array_keys($load_nomenklatura));
      // Загрузка для заданной Установки
      // массив Загрузка - Данные
      foreach ($load as $load_item) {
        if ($load_item->field_produce_unit["und"][0]["tid"] == $produce_unit_tid) {
          $day_start = $load_item->field_produce_date["und"][0]["value"];
          $load_array[$day_start] = [
            'output' => $load_item->field_produce_output["und"][0]["value"],
            'nomenklatura' => $load_nomenklatura[$load_item->id],
          ];
        }
      }

      // если задана текущая Заявка, добавить дополнительные данные
      if ($current_query) {
        if ($current_nom_tid = $current_query_wr->field_nomenklatura->tid->value()) {
          $current_client_id = $current_query_wr->field_nomenklatura->field_user->uid->value();
          $current_query_type = $current_query_wr->field_query_type->value();

          // is_current_load
          foreach ($current_query_wr->field_load->getIterator() as $current_load_wr) {
            if (!empty($load_array[$current_load_wr->field_produce_date->value()])) {
              $load_array[$current_load_wr->field_produce_date->value()]['is_current_load'] = true;
            } else {
              $load_array[$current_load_wr->field_produce_date->value()] = [
                'output' => $current_load_wr->field_produce_output->value(),
                'nomenklatura' => $load_nomenklatura[$current_load_wr->getIdentifier()],
                'is_current_load' => true,
              ];
            }
          }
        }
      }

      $today_start = gmmktime(0, 0, 0, date('n'), date('j'), date('Y'));
      foreach ($load_array as $day_start => $load_array_item) {
        // для текущей Номенклатуры занятость не выводим (в случае заполнения корректирующей Заявки)
        $load_array[$day_start]['is_busy'] = !empty($load_array[$day_start]) && $load_array[$day_start]['nomenklatura']['tid'] != $current_nom_tid;
        // дозаполним текущую Загрузку для которой значение false
        $load_array[$day_start]['is_current_load'] = !empty($load_array[$day_start]['is_current_load']);

        // дата недоступна для выбора в корректирующей Заявке для Клиента до сегодня и ещё спустя DAYS_UNAVAILABLE дней
        // данные могут быть получены из начальной и корректирующей Заявок
        $load_array[$day_start]['is_unavailable'] =
          !user_has_role(ROLE_MANAGER)
          && ($day_start < $today_start + DAYS_UNAVAILABLE * 24 * 60 * 60)
          && in_array($current_query_type, ['main', 'correction']);

        // загрузка установки этим же клиентом
        $load_array[$day_start]['is_busy_same_company'] = !empty($produce_unit_load[$day_start]) && $produce_unit_load[$day_start]['nomenklatura']['client_id'] == $current_client_id;

        $classes = [];
        if ($load_array[$day_start]['is_busy_same_company']) {
          $classes[] = 'company-loaded';
        } else {
          if ($load_array[$day_start]['is_busy'] && !$load_array[$day_start]['is_current_load']) $classes[] = 'loaded';
        }

//              if ($load_array[$day_start]['is_busy'] && !$load_array[$day_start]['is_current_load']) $classes[] = 'loaded';
        if ($load_array[$day_start]['is_current_load']) $classes[] = 'selected';
        if ($load_array[$day_start]['is_unavailable'] && !$load_array[$day_start]['is_current_load']) $classes[] = 'unavailable';
        $load_array[$day_start]['classes'] = $classes;
      }
    }

  }

  return $load_array;
}

/**
 * Implements hook_entity_delete().
 */
function query_entity_delete($entity, $type)
{
  // при удалении Запроса удалить всю Загрузку
  if ($entity->type == 'query') {
    if (!empty($entity->field_load['und'])) {
      $ids = [];
      foreach ($entity->field_load['und'] as $item) {
        $ids[] = $item['target_id'];
      }
      entity_delete_multiple('load', $ids);
    }
  }
}

function query_get_messages_html($data)
{
  $messages_html = '';
  if ($messages = unserialize($data)) {
    foreach ($messages as $time => $message) {
      $messages_html .=
        '<div>' .
        '<div>' . date('d.m.y h:m', $time) . '</div>' .
        '<div>' . ($message['from'] == 'user' ? '&nbsp;>>&nbsp;' : '&nbsp;<<&nbsp;') . '</div>' .
        '<div>' . $message['message'] . '</div>' .
        '</div>';
    }
  }

  return '<div>' . $messages_html . '</div>';
}


/**
 * query_approve_callback
 * обработчик кновки согласования
 */
function query_plan_approve_callback($month_start)
{
  $queries = [];

  $efquery = new EntityFieldQuery();
  $result_main = $efquery
    ->entityCondition('entity_type', 'query')
    ->fieldCondition('field_month', 'value', $month_start)
    ->fieldCondition('field_query_status_client', 'value', 'processing')
    ->fieldCondition('field_query_status_manager', 'value', 'approved')
    ->fieldCondition('field_query_type', 'value', 'main')
    ->execute();
  if ($result_main) {
    $queries = array_keys($result_main['query']);
  }

  if ($queries) {
    foreach($queries as $query_id) {
     query_query_approve($query_id, false);
    }
    drupal_set_message('План согласован');
    // todo отправить письмо менеджерам о согласовании плана клиентом
  }

  drupal_goto('<front>');
}

/**
 * query_approve_callback
 * обработчик кновки согласования
 */
function query_approve_callback($query_id)
{
  if (is_numeric($query_id)) {
    query_query_approve($query_id, user_has_role(ROLE_MANAGER));
    drupal_set_message('Заявка ' . $query_id . (user_has_role(ROLE_MANAGER) ? ' утверждена' : ' согласована'));
  } else {
    drupal_set_message('Ошибка при выполнении запроса', 'warning');
  }

  drupal_goto('<front>');
}

/**
 * @param $query_id
 * @param $managers_status - по умолчанию меняем статус менеджера
 * смена статуса Заявки
 */
function query_query_approve($query_id, $managers_status = true)
{
  $query_wr = entity_metadata_wrapper('query', $query_id);
  if ($query_wr->value()) {
    // менеджер или клиент
    if ($managers_status) {
      $query_wr->field_query_status_manager = 'approved';
      $query_wr->save();
    } else {
      // проверка прав
      if ($query_wr->field_nomenklatura->field_user->uid->value() == $GLOBALS['user']->uid) {
        $query_wr->field_query_status_client = 'approved';
        $query_wr->save();
      }
    }
  }

  return true;
}

/**
 * проверка, началось ли производство по Заявке
 * @param $query
 * @return bool
 */
function query_check_query_produce_started($query)
{
  $today_start = gmmktime(0, 0, 0, date('n', time()), date('j', time()), date('Y', time()));
  $query_wr = entity_metadata_wrapper('query', $query);
  foreach ($query_wr->field_load->getIterator() as $load_wr) {
    if ($load_wr->value()) {
      // за сутки до начала производства и позже - производство началось
      if ($today_start > $load_wr->field_produce_date->value() - 24*60*60) {
        return true;
      }
    }
  }

  return false;
}

/**
 * проверка, закончилось ли производство по Заявке (последняя дата считается за окончание)
 * @param $query
 * @return bool
 */
function query_check_query_produce_finished($query)
{
  $today_start = gmmktime(0, 0, 0, date('n'), date('j'), date('Y'));
  $query_wr = entity_metadata_wrapper('query', $query);
  $date_start = null;
  foreach ($query_wr->field_load->getIterator() as $load_wr) {
    if ($load_wr->value()) {
      // за сутки до начала производства и позже - производство началось
      $date_start = $load_wr->field_produce_date->value();
      if ($today_start < $date_start) {
        return false;
      }
    }
  }

  return $date_start ? true : false;
}

function query_date_select_process_alter(&$element, $form_state, $context)
{
  // заменить короткие месяца на полные
  if (!empty($element["month"]["#options"])) {
    foreach ($element["month"]["#options"] as $key => &$option) {
      $year = $element["year"]["#default_value"];
      if (!empty($form_state["values"]["field_produce_date_value"]["value"]["year"])) {
         $year = $form_state["values"]["field_produce_date_value"]["value"]["year"];
      } elseif (!empty($form_state["values"]["field_month_value"]['year'])) {
        $year = $form_state["values"]["field_month_value"]["value"]["year"];
      }
      if (is_numeric($key)) $option = t(date('F', gmmktime(0, 0, 0, $key, 1, $year)));
    }
  }
}
